
oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001848  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000285c  08001954  08001954  00011954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080041b4  080041b4  000141b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  080041b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000047c  20000024  080041dc  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200004a0  080041dc  000204a0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010013  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001f72  00000000  00000000  00030060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0000613f  00000000  00000000  00031fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000006e8  00000000  00000000  00038118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000006e8  00000000  00000000  00038800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00014ba0  00000000  00000000  00038ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000c092  00000000  00000000  0004da88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0006b6e6  00000000  00000000  00059b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  000c5200  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001354  00000000  00000000  000c5254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	0800193c 	.word	0x0800193c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	0800193c 	.word	0x0800193c

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <HAL_InitTick+0x40>)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <HAL_InitTick+0x44>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f894 	bl	8000290 <HAL_SYSTICK_Config>
 8000168:	b968      	cbnz	r0, 8000186 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2c0f      	cmp	r4, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
 8000170:	e00a      	b.n	8000188 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000172:	2200      	movs	r2, #0
 8000174:	4621      	mov	r1, r4
 8000176:	f04f 30ff 	mov.w	r0, #4294967295
 800017a:	f000 f855 	bl	8000228 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017e:	4b03      	ldr	r3, [pc, #12]	; (800018c <HAL_InitTick+0x40>)
 8000180:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000182:	2000      	movs	r0, #0
 8000184:	e000      	b.n	8000188 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000186:	2001      	movs	r0, #1
}
 8000188:	bd10      	pop	{r4, pc}
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000
 8000190:	20000020 	.word	0x20000020

08000194 <HAL_Init>:
{
 8000194:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000196:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
 8000198:	6813      	ldr	r3, [r2, #0]
 800019a:	f043 0310 	orr.w	r3, r3, #16
 800019e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a0:	2003      	movs	r0, #3
 80001a2:	f000 f82f 	bl	8000204 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 faee 	bl	800178c <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	6811      	ldr	r1, [r2, #0]
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <HAL_IncTick+0x14>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000448 	.word	0x20000448
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000448 	.word	0x20000448

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80001ea:	d002      	beq.n	80001f2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <HAL_Delay+0x24>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f2:	f7ff ffed 	bl	80001d0 <HAL_GetTick>
 80001f6:	1b40      	subs	r0, r0, r5
 80001f8:	42a0      	cmp	r0, r4
 80001fa:	d3fa      	bcc.n	80001f2 <HAL_Delay+0x16>
  {
  }
}
 80001fc:	bd38      	pop	{r3, r4, r5, pc}
 80001fe:	bf00      	nop
 8000200:	20000000 	.word	0x20000000

08000204 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000206:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000208:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020c:	041b      	lsls	r3, r3, #16
 800020e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000210:	0200      	lsls	r0, r0, #8
 8000212:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000216:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000218:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800021c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000220:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000222:	4770      	bx	lr
 8000224:	e000ed00 	.word	0xe000ed00

08000228 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000228:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800022a:	4b17      	ldr	r3, [pc, #92]	; (8000288 <HAL_NVIC_SetPriority+0x60>)
 800022c:	68db      	ldr	r3, [r3, #12]
 800022e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000232:	f1c3 0407 	rsb	r4, r3, #7
 8000236:	2c04      	cmp	r4, #4
 8000238:	bf28      	it	cs
 800023a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023c:	1d1d      	adds	r5, r3, #4
 800023e:	2d06      	cmp	r5, #6
 8000240:	d918      	bls.n	8000274 <HAL_NVIC_SetPriority+0x4c>
 8000242:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	f04f 35ff 	mov.w	r5, #4294967295
 8000248:	fa05 f404 	lsl.w	r4, r5, r4
 800024c:	ea21 0104 	bic.w	r1, r1, r4
 8000250:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000252:	fa05 f303 	lsl.w	r3, r5, r3
 8000256:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 800025c:	2800      	cmp	r0, #0
 800025e:	db0b      	blt.n	8000278 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	0109      	lsls	r1, r1, #4
 8000262:	b2c9      	uxtb	r1, r1
 8000264:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000268:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800026c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000270:	bc30      	pop	{r4, r5}
 8000272:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000274:	2300      	movs	r3, #0
 8000276:	e7e5      	b.n	8000244 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000278:	f000 000f 	and.w	r0, r0, #15
 800027c:	0109      	lsls	r1, r1, #4
 800027e:	b2c9      	uxtb	r1, r1
 8000280:	4b02      	ldr	r3, [pc, #8]	; (800028c <HAL_NVIC_SetPriority+0x64>)
 8000282:	5419      	strb	r1, [r3, r0]
 8000284:	e7f4      	b.n	8000270 <HAL_NVIC_SetPriority+0x48>
 8000286:	bf00      	nop
 8000288:	e000ed00 	.word	0xe000ed00
 800028c:	e000ed14 	.word	0xe000ed14

08000290 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000290:	3801      	subs	r0, #1
 8000292:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000296:	d20a      	bcs.n	80002ae <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000298:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <HAL_SYSTICK_Config+0x24>)
 800029a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <HAL_SYSTICK_Config+0x28>)
 800029e:	21f0      	movs	r1, #240	; 0xf0
 80002a0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a4:	2000      	movs	r0, #0
 80002a6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a8:	2207      	movs	r2, #7
 80002aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80002ac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002ae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000e010 	.word	0xe000e010
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002bc:	b4f0      	push	{r4, r5, r6, r7}
 80002be:	b082      	sub	sp, #8
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002c0:	2500      	movs	r5, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002c2:	462c      	mov	r4, r5
 80002c4:	e0a3      	b.n	800040e <HAL_GPIO_Init+0x152>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002c6:	4f7f      	ldr	r7, [pc, #508]	; (80004c4 <HAL_GPIO_Init+0x208>)
 80002c8:	42bb      	cmp	r3, r7
 80002ca:	d010      	beq.n	80002ee <HAL_GPIO_Init+0x32>
 80002cc:	d907      	bls.n	80002de <HAL_GPIO_Init+0x22>
 80002ce:	4f7e      	ldr	r7, [pc, #504]	; (80004c8 <HAL_GPIO_Init+0x20c>)
 80002d0:	42bb      	cmp	r3, r7
 80002d2:	d00c      	beq.n	80002ee <HAL_GPIO_Init+0x32>
 80002d4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80002d8:	42bb      	cmp	r3, r7
 80002da:	d008      	beq.n	80002ee <HAL_GPIO_Init+0x32>
 80002dc:	e013      	b.n	8000306 <HAL_GPIO_Init+0x4a>
 80002de:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80002e2:	42bb      	cmp	r3, r7
 80002e4:	d003      	beq.n	80002ee <HAL_GPIO_Init+0x32>
 80002e6:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 80002ea:	42bb      	cmp	r3, r7
 80002ec:	d107      	bne.n	80002fe <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80002ee:	688b      	ldr	r3, [r1, #8]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d058      	beq.n	80003a6 <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d051      	beq.n	800039c <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80002f8:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80002fa:	2508      	movs	r5, #8
 80002fc:	e003      	b.n	8000306 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80002fe:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000302:	42bb      	cmp	r3, r7
 8000304:	d0f3      	beq.n	80002ee <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000306:	2eff      	cmp	r6, #255	; 0xff
 8000308:	d84f      	bhi.n	80003aa <HAL_GPIO_Init+0xee>
 800030a:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800030c:	2eff      	cmp	r6, #255	; 0xff
 800030e:	d84f      	bhi.n	80003b0 <HAL_GPIO_Init+0xf4>
 8000310:	00a2      	lsls	r2, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000312:	f8dc 3000 	ldr.w	r3, [ip]
 8000316:	270f      	movs	r7, #15
 8000318:	4097      	lsls	r7, r2
 800031a:	ea23 0307 	bic.w	r3, r3, r7
 800031e:	fa05 f202 	lsl.w	r2, r5, r2
 8000322:	4313      	orrs	r3, r2
 8000324:	f8cc 3000 	str.w	r3, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000328:	684b      	ldr	r3, [r1, #4]
 800032a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800032e:	d06d      	beq.n	800040c <HAL_GPIO_Init+0x150>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000330:	4b66      	ldr	r3, [pc, #408]	; (80004cc <HAL_GPIO_Init+0x210>)
 8000332:	699a      	ldr	r2, [r3, #24]
 8000334:	f042 0201 	orr.w	r2, r2, #1
 8000338:	619a      	str	r2, [r3, #24]
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0301 	and.w	r3, r3, #1
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 8000344:	08a2      	lsrs	r2, r4, #2
 8000346:	1c97      	adds	r7, r2, #2
 8000348:	4b61      	ldr	r3, [pc, #388]	; (80004d0 <HAL_GPIO_Init+0x214>)
 800034a:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800034e:	f004 0703 	and.w	r7, r4, #3
 8000352:	00bf      	lsls	r7, r7, #2
 8000354:	f04f 0c0f 	mov.w	ip, #15
 8000358:	fa0c fc07 	lsl.w	ip, ip, r7
 800035c:	ea23 0c0c 	bic.w	ip, r3, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000360:	4b5c      	ldr	r3, [pc, #368]	; (80004d4 <HAL_GPIO_Init+0x218>)
 8000362:	4298      	cmp	r0, r3
 8000364:	d02a      	beq.n	80003bc <HAL_GPIO_Init+0x100>
 8000366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800036a:	4298      	cmp	r0, r3
 800036c:	f000 808a 	beq.w	8000484 <HAL_GPIO_Init+0x1c8>
 8000370:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000374:	4298      	cmp	r0, r3
 8000376:	f000 8087 	beq.w	8000488 <HAL_GPIO_Init+0x1cc>
 800037a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800037e:	4298      	cmp	r0, r3
 8000380:	d01a      	beq.n	80003b8 <HAL_GPIO_Init+0xfc>
 8000382:	2304      	movs	r3, #4
 8000384:	e01b      	b.n	80003be <HAL_GPIO_Init+0x102>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000386:	68cd      	ldr	r5, [r1, #12]
          break;
 8000388:	e7bd      	b.n	8000306 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800038a:	68cd      	ldr	r5, [r1, #12]
 800038c:	3504      	adds	r5, #4
          break;
 800038e:	e7ba      	b.n	8000306 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000390:	68cd      	ldr	r5, [r1, #12]
 8000392:	3508      	adds	r5, #8
          break;
 8000394:	e7b7      	b.n	8000306 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000396:	68cd      	ldr	r5, [r1, #12]
 8000398:	350c      	adds	r5, #12
          break;
 800039a:	e7b4      	b.n	8000306 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 800039c:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800039e:	2508      	movs	r5, #8
 80003a0:	e7b1      	b.n	8000306 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80003a2:	2500      	movs	r5, #0
 80003a4:	e7af      	b.n	8000306 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80003a6:	2504      	movs	r5, #4
 80003a8:	e7ad      	b.n	8000306 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003aa:	f100 0c04 	add.w	ip, r0, #4
 80003ae:	e7ad      	b.n	800030c <HAL_GPIO_Init+0x50>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80003b0:	f1a4 0208 	sub.w	r2, r4, #8
 80003b4:	0092      	lsls	r2, r2, #2
 80003b6:	e7ac      	b.n	8000312 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003b8:	2303      	movs	r3, #3
 80003ba:	e000      	b.n	80003be <HAL_GPIO_Init+0x102>
 80003bc:	2300      	movs	r3, #0
 80003be:	40bb      	lsls	r3, r7
 80003c0:	ea43 030c 	orr.w	r3, r3, ip
        AFIO->EXTICR[position >> 2U] = temp;
 80003c4:	3202      	adds	r2, #2
 80003c6:	4f42      	ldr	r7, [pc, #264]	; (80004d0 <HAL_GPIO_Init+0x214>)
 80003c8:	f847 3022 	str.w	r3, [r7, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003cc:	684b      	ldr	r3, [r1, #4]
 80003ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80003d2:	d05b      	beq.n	800048c <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003d4:	4a40      	ldr	r2, [pc, #256]	; (80004d8 <HAL_GPIO_Init+0x21c>)
 80003d6:	6813      	ldr	r3, [r2, #0]
 80003d8:	4333      	orrs	r3, r6
 80003da:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003dc:	684b      	ldr	r3, [r1, #4]
 80003de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80003e2:	d059      	beq.n	8000498 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003e4:	4a3c      	ldr	r2, [pc, #240]	; (80004d8 <HAL_GPIO_Init+0x21c>)
 80003e6:	6853      	ldr	r3, [r2, #4]
 80003e8:	4333      	orrs	r3, r6
 80003ea:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003ec:	684b      	ldr	r3, [r1, #4]
 80003ee:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f2:	d057      	beq.n	80004a4 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003f4:	4a38      	ldr	r2, [pc, #224]	; (80004d8 <HAL_GPIO_Init+0x21c>)
 80003f6:	6893      	ldr	r3, [r2, #8]
 80003f8:	4333      	orrs	r3, r6
 80003fa:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003fc:	684b      	ldr	r3, [r1, #4]
 80003fe:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000402:	d055      	beq.n	80004b0 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000404:	4a34      	ldr	r2, [pc, #208]	; (80004d8 <HAL_GPIO_Init+0x21c>)
 8000406:	68d3      	ldr	r3, [r2, #12]
 8000408:	431e      	orrs	r6, r3
 800040a:	60d6      	str	r6, [r2, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800040c:	3401      	adds	r4, #1
 800040e:	2c0f      	cmp	r4, #15
 8000410:	d854      	bhi.n	80004bc <HAL_GPIO_Init+0x200>
    ioposition = (0x01U << position);
 8000412:	2201      	movs	r2, #1
 8000414:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000416:	680b      	ldr	r3, [r1, #0]
 8000418:	ea03 0602 	and.w	r6, r3, r2
    if (iocurrent == ioposition)
 800041c:	ea32 0303 	bics.w	r3, r2, r3
 8000420:	d1f4      	bne.n	800040c <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8000422:	684b      	ldr	r3, [r1, #4]
 8000424:	2b12      	cmp	r3, #18
 8000426:	f63f af4e 	bhi.w	80002c6 <HAL_GPIO_Init+0xa>
 800042a:	2b12      	cmp	r3, #18
 800042c:	f63f af6b 	bhi.w	8000306 <HAL_GPIO_Init+0x4a>
 8000430:	a701      	add	r7, pc, #4	; (adr r7, 8000438 <HAL_GPIO_Init+0x17c>)
 8000432:	f857 f023 	ldr.w	pc, [r7, r3, lsl #2]
 8000436:	bf00      	nop
 8000438:	080002ef 	.word	0x080002ef
 800043c:	08000387 	.word	0x08000387
 8000440:	08000391 	.word	0x08000391
 8000444:	080003a3 	.word	0x080003a3
 8000448:	08000307 	.word	0x08000307
 800044c:	08000307 	.word	0x08000307
 8000450:	08000307 	.word	0x08000307
 8000454:	08000307 	.word	0x08000307
 8000458:	08000307 	.word	0x08000307
 800045c:	08000307 	.word	0x08000307
 8000460:	08000307 	.word	0x08000307
 8000464:	08000307 	.word	0x08000307
 8000468:	08000307 	.word	0x08000307
 800046c:	08000307 	.word	0x08000307
 8000470:	08000307 	.word	0x08000307
 8000474:	08000307 	.word	0x08000307
 8000478:	08000307 	.word	0x08000307
 800047c:	0800038b 	.word	0x0800038b
 8000480:	08000397 	.word	0x08000397
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000484:	2301      	movs	r3, #1
 8000486:	e79a      	b.n	80003be <HAL_GPIO_Init+0x102>
 8000488:	2302      	movs	r3, #2
 800048a:	e798      	b.n	80003be <HAL_GPIO_Init+0x102>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800048c:	4a12      	ldr	r2, [pc, #72]	; (80004d8 <HAL_GPIO_Init+0x21c>)
 800048e:	6813      	ldr	r3, [r2, #0]
 8000490:	ea23 0306 	bic.w	r3, r3, r6
 8000494:	6013      	str	r3, [r2, #0]
 8000496:	e7a1      	b.n	80003dc <HAL_GPIO_Init+0x120>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000498:	4a0f      	ldr	r2, [pc, #60]	; (80004d8 <HAL_GPIO_Init+0x21c>)
 800049a:	6853      	ldr	r3, [r2, #4]
 800049c:	ea23 0306 	bic.w	r3, r3, r6
 80004a0:	6053      	str	r3, [r2, #4]
 80004a2:	e7a3      	b.n	80003ec <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80004a4:	4a0c      	ldr	r2, [pc, #48]	; (80004d8 <HAL_GPIO_Init+0x21c>)
 80004a6:	6893      	ldr	r3, [r2, #8]
 80004a8:	ea23 0306 	bic.w	r3, r3, r6
 80004ac:	6093      	str	r3, [r2, #8]
 80004ae:	e7a5      	b.n	80003fc <HAL_GPIO_Init+0x140>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80004b0:	4a09      	ldr	r2, [pc, #36]	; (80004d8 <HAL_GPIO_Init+0x21c>)
 80004b2:	68d3      	ldr	r3, [r2, #12]
 80004b4:	ea23 0606 	bic.w	r6, r3, r6
 80004b8:	60d6      	str	r6, [r2, #12]
 80004ba:	e7a7      	b.n	800040c <HAL_GPIO_Init+0x150>
        }
      }
    }
  }
}
 80004bc:	b002      	add	sp, #8
 80004be:	bcf0      	pop	{r4, r5, r6, r7}
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	10220000 	.word	0x10220000
 80004c8:	10310000 	.word	0x10310000
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010000 	.word	0x40010000
 80004d4:	40010800 	.word	0x40010800
 80004d8:	40010400 	.word	0x40010400

080004dc <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80004dc:	6803      	ldr	r3, [r0, #0]
 80004de:	695a      	ldr	r2, [r3, #20]
 80004e0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80004e4:	d101      	bne.n	80004ea <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80004e6:	2000      	movs	r0, #0
}
 80004e8:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80004ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80004ee:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80004f0:	2304      	movs	r3, #4
 80004f2:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80004f8:	2220      	movs	r2, #32
 80004fa:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80004fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8000502:	2001      	movs	r0, #1
 8000504:	4770      	bx	lr

08000506 <I2C_WaitOnFlagUntilTimeout>:
{
 8000506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800050a:	4607      	mov	r7, r0
 800050c:	460d      	mov	r5, r1
 800050e:	4690      	mov	r8, r2
 8000510:	461e      	mov	r6, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000512:	e01e      	b.n	8000552 <I2C_WaitOnFlagUntilTimeout+0x4c>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000514:	b12e      	cbz	r6, 8000522 <I2C_WaitOnFlagUntilTimeout+0x1c>
 8000516:	f7ff fe5b 	bl	80001d0 <HAL_GetTick>
 800051a:	9b06      	ldr	r3, [sp, #24]
 800051c:	1ac0      	subs	r0, r0, r3
 800051e:	42b0      	cmp	r0, r6
 8000520:	d917      	bls.n	8000552 <I2C_WaitOnFlagUntilTimeout+0x4c>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000522:	2300      	movs	r3, #0
 8000524:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000526:	2220      	movs	r2, #32
 8000528:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800052c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        __HAL_UNLOCK(hi2c);
 8000530:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000534:	2003      	movs	r0, #3
 8000536:	e01a      	b.n	800056e <I2C_WaitOnFlagUntilTimeout+0x68>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	699c      	ldr	r4, [r3, #24]
 800053c:	ea25 0404 	bic.w	r4, r5, r4
 8000540:	b2a4      	uxth	r4, r4
 8000542:	fab4 f484 	clz	r4, r4
 8000546:	0964      	lsrs	r4, r4, #5
 8000548:	45a0      	cmp	r8, r4
 800054a:	d10f      	bne.n	800056c <I2C_WaitOnFlagUntilTimeout+0x66>
    if(Timeout != HAL_MAX_DELAY)
 800054c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000550:	d1e0      	bne.n	8000514 <I2C_WaitOnFlagUntilTimeout+0xe>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000552:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8000556:	2b01      	cmp	r3, #1
 8000558:	d1ee      	bne.n	8000538 <I2C_WaitOnFlagUntilTimeout+0x32>
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	695c      	ldr	r4, [r3, #20]
 800055e:	ea25 0404 	bic.w	r4, r5, r4
 8000562:	b2a4      	uxth	r4, r4
 8000564:	fab4 f484 	clz	r4, r4
 8000568:	0964      	lsrs	r4, r4, #5
 800056a:	e7ed      	b.n	8000548 <I2C_WaitOnFlagUntilTimeout+0x42>
  return HAL_OK;
 800056c:	2000      	movs	r0, #0
}
 800056e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000572 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000576:	4605      	mov	r5, r0
 8000578:	460e      	mov	r6, r1
 800057a:	4617      	mov	r7, r2
 800057c:	4698      	mov	r8, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800057e:	e033      	b.n	80005e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x76>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000586:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000588:	682b      	ldr	r3, [r5, #0]
 800058a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800058e:	615a      	str	r2, [r3, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000590:	2304      	movs	r3, #4
 8000592:	642b      	str	r3, [r5, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8000594:	2300      	movs	r3, #0
 8000596:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8000598:	2220      	movs	r2, #32
 800059a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 800059e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80005a2:	2001      	movs	r0, #1
 80005a4:	e02e      	b.n	8000604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80005a6:	b12f      	cbz	r7, 80005b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x42>
 80005a8:	f7ff fe12 	bl	80001d0 <HAL_GetTick>
 80005ac:	eba0 0008 	sub.w	r0, r0, r8
 80005b0:	42b8      	cmp	r0, r7
 80005b2:	d919      	bls.n	80005e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x76>
        hi2c->PreviousState = I2C_STATE_NONE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80005b8:	2220      	movs	r2, #32
 80005ba:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80005be:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 80005c2:	2003      	movs	r0, #3
 80005c4:	e01e      	b.n	8000604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80005c6:	682b      	ldr	r3, [r5, #0]
 80005c8:	699c      	ldr	r4, [r3, #24]
 80005ca:	ea26 0404 	bic.w	r4, r6, r4
 80005ce:	b2a4      	uxth	r4, r4
 80005d0:	3c00      	subs	r4, #0
 80005d2:	bf18      	it	ne
 80005d4:	2401      	movne	r4, #1
 80005d6:	b1a4      	cbz	r4, 8000602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x90>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80005d8:	682b      	ldr	r3, [r5, #0]
 80005da:	695a      	ldr	r2, [r3, #20]
 80005dc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80005e0:	d1ce      	bne.n	8000580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if(Timeout != HAL_MAX_DELAY)
 80005e2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80005e6:	d1de      	bne.n	80005a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x34>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80005e8:	f3c6 4307 	ubfx	r3, r6, #16, #8
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d1ea      	bne.n	80005c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>
 80005f0:	682b      	ldr	r3, [r5, #0]
 80005f2:	695c      	ldr	r4, [r3, #20]
 80005f4:	ea26 0404 	bic.w	r4, r6, r4
 80005f8:	b2a4      	uxth	r4, r4
 80005fa:	3c00      	subs	r4, #0
 80005fc:	bf18      	it	ne
 80005fe:	2401      	movne	r4, #1
 8000600:	e7e9      	b.n	80005d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
  return HAL_OK;
 8000602:	2000      	movs	r0, #0
}
 8000604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000608 <I2C_MasterRequestWrite>:
{
 8000608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060a:	b083      	sub	sp, #12
 800060c:	4604      	mov	r4, r0
 800060e:	460d      	mov	r5, r1
 8000610:	4616      	mov	r6, r2
 8000612:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000614:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000616:	2b04      	cmp	r3, #4
 8000618:	d00d      	beq.n	8000636 <I2C_MasterRequestWrite+0x2e>
 800061a:	2b01      	cmp	r3, #1
 800061c:	d00b      	beq.n	8000636 <I2C_MasterRequestWrite+0x2e>
 800061e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000622:	d008      	beq.n	8000636 <I2C_MasterRequestWrite+0x2e>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000624:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000626:	2b12      	cmp	r3, #18
 8000628:	d10a      	bne.n	8000640 <I2C_MasterRequestWrite+0x38>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800062a:	6802      	ldr	r2, [r0, #0]
 800062c:	6813      	ldr	r3, [r2, #0]
 800062e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	e004      	b.n	8000640 <I2C_MasterRequestWrite+0x38>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000636:	6822      	ldr	r2, [r4, #0]
 8000638:	6813      	ldr	r3, [r2, #0]
 800063a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800063e:	6013      	str	r3, [r2, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000640:	9700      	str	r7, [sp, #0]
 8000642:	4633      	mov	r3, r6
 8000644:	2200      	movs	r2, #0
 8000646:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800064a:	4620      	mov	r0, r4
 800064c:	f7ff ff5b 	bl	8000506 <I2C_WaitOnFlagUntilTimeout>
 8000650:	bb70      	cbnz	r0, 80006b0 <I2C_MasterRequestWrite+0xa8>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000652:	6923      	ldr	r3, [r4, #16]
 8000654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000658:	d10f      	bne.n	800067a <I2C_MasterRequestWrite+0x72>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800065a:	6823      	ldr	r3, [r4, #0]
 800065c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000660:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	4632      	mov	r2, r6
 8000666:	4914      	ldr	r1, [pc, #80]	; (80006b8 <I2C_MasterRequestWrite+0xb0>)
 8000668:	4620      	mov	r0, r4
 800066a:	f7ff ff82 	bl	8000572 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800066e:	b300      	cbz	r0, 80006b2 <I2C_MasterRequestWrite+0xaa>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000670:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000672:	2b04      	cmp	r3, #4
 8000674:	d01a      	beq.n	80006ac <I2C_MasterRequestWrite+0xa4>
      return HAL_TIMEOUT;
 8000676:	2003      	movs	r0, #3
 8000678:	e01b      	b.n	80006b2 <I2C_MasterRequestWrite+0xaa>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800067a:	11eb      	asrs	r3, r5, #7
 800067c:	6822      	ldr	r2, [r4, #0]
 800067e:	f003 0306 	and.w	r3, r3, #6
 8000682:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000686:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4632      	mov	r2, r6
 800068c:	490b      	ldr	r1, [pc, #44]	; (80006bc <I2C_MasterRequestWrite+0xb4>)
 800068e:	4620      	mov	r0, r4
 8000690:	f7ff ff6f 	bl	8000572 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000694:	b130      	cbz	r0, 80006a4 <I2C_MasterRequestWrite+0x9c>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000696:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000698:	2b04      	cmp	r3, #4
 800069a:	d001      	beq.n	80006a0 <I2C_MasterRequestWrite+0x98>
        return HAL_TIMEOUT;
 800069c:	2003      	movs	r0, #3
 800069e:	e008      	b.n	80006b2 <I2C_MasterRequestWrite+0xaa>
        return HAL_ERROR;
 80006a0:	2001      	movs	r0, #1
 80006a2:	e006      	b.n	80006b2 <I2C_MasterRequestWrite+0xaa>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80006a4:	6823      	ldr	r3, [r4, #0]
 80006a6:	b2ed      	uxtb	r5, r5
 80006a8:	611d      	str	r5, [r3, #16]
 80006aa:	e7da      	b.n	8000662 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 80006ac:	2001      	movs	r0, #1
 80006ae:	e000      	b.n	80006b2 <I2C_MasterRequestWrite+0xaa>
    return HAL_TIMEOUT;
 80006b0:	2003      	movs	r0, #3
}
 80006b2:	b003      	add	sp, #12
 80006b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b6:	bf00      	nop
 80006b8:	00010002 	.word	0x00010002
 80006bc:	00010008 	.word	0x00010008

080006c0 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	4604      	mov	r4, r0
 80006c4:	460d      	mov	r5, r1
 80006c6:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80006c8:	6823      	ldr	r3, [r4, #0]
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80006d0:	d119      	bne.n	8000706 <I2C_WaitOnTXEFlagUntilTimeout+0x46>
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80006d2:	4620      	mov	r0, r4
 80006d4:	f7ff ff02 	bl	80004dc <I2C_IsAcknowledgeFailed>
 80006d8:	b9b8      	cbnz	r0, 800070a <I2C_WaitOnTXEFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 80006da:	f1b5 3fff 	cmp.w	r5, #4294967295
 80006de:	d0f3      	beq.n	80006c8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80006e0:	b125      	cbz	r5, 80006ec <I2C_WaitOnTXEFlagUntilTimeout+0x2c>
 80006e2:	f7ff fd75 	bl	80001d0 <HAL_GetTick>
 80006e6:	1b80      	subs	r0, r0, r6
 80006e8:	42a8      	cmp	r0, r5
 80006ea:	d9ed      	bls.n	80006c8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80006ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006ee:	f043 0320 	orr.w	r3, r3, #32
 80006f2:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80006f8:	2220      	movs	r2, #32
 80006fa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80006fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000702:	2003      	movs	r0, #3
 8000704:	e000      	b.n	8000708 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
  return HAL_OK;      
 8000706:	2000      	movs	r0, #0
}
 8000708:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800070a:	2001      	movs	r0, #1
 800070c:	e7fc      	b.n	8000708 <I2C_WaitOnTXEFlagUntilTimeout+0x48>

0800070e <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 800070e:	b570      	push	{r4, r5, r6, lr}
 8000710:	4604      	mov	r4, r0
 8000712:	460d      	mov	r5, r1
 8000714:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000716:	6823      	ldr	r3, [r4, #0]
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f013 0f04 	tst.w	r3, #4
 800071e:	d119      	bne.n	8000754 <I2C_WaitOnBTFFlagUntilTimeout+0x46>
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000720:	4620      	mov	r0, r4
 8000722:	f7ff fedb 	bl	80004dc <I2C_IsAcknowledgeFailed>
 8000726:	b9b8      	cbnz	r0, 8000758 <I2C_WaitOnBTFFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 8000728:	f1b5 3fff 	cmp.w	r5, #4294967295
 800072c:	d0f3      	beq.n	8000716 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800072e:	b125      	cbz	r5, 800073a <I2C_WaitOnBTFFlagUntilTimeout+0x2c>
 8000730:	f7ff fd4e 	bl	80001d0 <HAL_GetTick>
 8000734:	1b80      	subs	r0, r0, r6
 8000736:	42a8      	cmp	r0, r5
 8000738:	d9ed      	bls.n	8000716 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800073a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800073c:	f043 0320 	orr.w	r3, r3, #32
 8000740:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000742:	2300      	movs	r3, #0
 8000744:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000746:	2220      	movs	r2, #32
 8000748:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800074c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000750:	2003      	movs	r0, #3
 8000752:	e000      	b.n	8000756 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
  return HAL_OK;
 8000754:	2000      	movs	r0, #0
}
 8000756:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000758:	2001      	movs	r0, #1
 800075a:	e7fc      	b.n	8000756 <I2C_WaitOnBTFFlagUntilTimeout+0x48>

0800075c <HAL_I2C_Init>:
  if(hi2c == NULL)
 800075c:	2800      	cmp	r0, #0
 800075e:	f000 80a5 	beq.w	80008ac <HAL_I2C_Init+0x150>
{
 8000762:	b538      	push	{r3, r4, r5, lr}
 8000764:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000766:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800076a:	2b00      	cmp	r3, #0
 800076c:	d050      	beq.n	8000810 <HAL_I2C_Init+0xb4>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800076e:	2324      	movs	r3, #36	; 0x24
 8000770:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000774:	6822      	ldr	r2, [r4, #0]
 8000776:	6813      	ldr	r3, [r2, #0]
 8000778:	f023 0301 	bic.w	r3, r3, #1
 800077c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800077e:	f000 fd43 	bl	8001208 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000782:	6862      	ldr	r2, [r4, #4]
 8000784:	4b4b      	ldr	r3, [pc, #300]	; (80008b4 <HAL_I2C_Init+0x158>)
 8000786:	429a      	cmp	r2, r3
 8000788:	d847      	bhi.n	800081a <HAL_I2C_Init+0xbe>
 800078a:	4b4b      	ldr	r3, [pc, #300]	; (80008b8 <HAL_I2C_Init+0x15c>)
 800078c:	4298      	cmp	r0, r3
 800078e:	bf8c      	ite	hi
 8000790:	2300      	movhi	r3, #0
 8000792:	2301      	movls	r3, #1
 8000794:	2b00      	cmp	r3, #0
 8000796:	f040 808b 	bne.w	80008b0 <HAL_I2C_Init+0x154>
  freqrange = I2C_FREQRANGE(pclk1);
 800079a:	4b48      	ldr	r3, [pc, #288]	; (80008bc <HAL_I2C_Init+0x160>)
 800079c:	fba3 2300 	umull	r2, r3, r3, r0
 80007a0:	0c9b      	lsrs	r3, r3, #18
  hi2c->Instance->CR2 = freqrange;
 80007a2:	6822      	ldr	r2, [r4, #0]
 80007a4:	6053      	str	r3, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80007a6:	6861      	ldr	r1, [r4, #4]
 80007a8:	4a42      	ldr	r2, [pc, #264]	; (80008b4 <HAL_I2C_Init+0x158>)
 80007aa:	4291      	cmp	r1, r2
 80007ac:	d83b      	bhi.n	8000826 <HAL_I2C_Init+0xca>
 80007ae:	3301      	adds	r3, #1
 80007b0:	6822      	ldr	r2, [r4, #0]
 80007b2:	6213      	str	r3, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80007b4:	6861      	ldr	r1, [r4, #4]
 80007b6:	4b3f      	ldr	r3, [pc, #252]	; (80008b4 <HAL_I2C_Init+0x158>)
 80007b8:	4299      	cmp	r1, r3
 80007ba:	d83e      	bhi.n	800083a <HAL_I2C_Init+0xde>
 80007bc:	1e43      	subs	r3, r0, #1
 80007be:	0049      	lsls	r1, r1, #1
 80007c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c4:	3301      	adds	r3, #1
 80007c6:	f640 72fc 	movw	r2, #4092	; 0xffc
 80007ca:	4213      	tst	r3, r2
 80007cc:	d06a      	beq.n	80008a4 <HAL_I2C_Init+0x148>
 80007ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007d2:	6822      	ldr	r2, [r4, #0]
 80007d4:	61d3      	str	r3, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80007d6:	69e3      	ldr	r3, [r4, #28]
 80007d8:	6a21      	ldr	r1, [r4, #32]
 80007da:	6822      	ldr	r2, [r4, #0]
 80007dc:	430b      	orrs	r3, r1
 80007de:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80007e0:	6923      	ldr	r3, [r4, #16]
 80007e2:	68e1      	ldr	r1, [r4, #12]
 80007e4:	6822      	ldr	r2, [r4, #0]
 80007e6:	430b      	orrs	r3, r1
 80007e8:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80007ea:	6963      	ldr	r3, [r4, #20]
 80007ec:	69a1      	ldr	r1, [r4, #24]
 80007ee:	6822      	ldr	r2, [r4, #0]
 80007f0:	430b      	orrs	r3, r1
 80007f2:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80007f4:	6822      	ldr	r2, [r4, #0]
 80007f6:	6813      	ldr	r3, [r2, #0]
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80007fe:	2000      	movs	r0, #0
 8000800:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000802:	2320      	movs	r3, #32
 8000804:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000808:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800080a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 800080e:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000810:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000814:	f000 ffdc 	bl	80017d0 <HAL_I2C_MspInit>
 8000818:	e7a9      	b.n	800076e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800081a:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <HAL_I2C_Init+0x164>)
 800081c:	4298      	cmp	r0, r3
 800081e:	bf8c      	ite	hi
 8000820:	2300      	movhi	r3, #0
 8000822:	2301      	movls	r3, #1
 8000824:	e7b6      	b.n	8000794 <HAL_I2C_Init+0x38>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000826:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800082a:	fb02 f303 	mul.w	r3, r2, r3
 800082e:	4a25      	ldr	r2, [pc, #148]	; (80008c4 <HAL_I2C_Init+0x168>)
 8000830:	fba2 2303 	umull	r2, r3, r2, r3
 8000834:	099b      	lsrs	r3, r3, #6
 8000836:	3301      	adds	r3, #1
 8000838:	e7ba      	b.n	80007b0 <HAL_I2C_Init+0x54>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800083a:	68a3      	ldr	r3, [r4, #8]
 800083c:	b9bb      	cbnz	r3, 800086e <HAL_I2C_Init+0x112>
 800083e:	1e42      	subs	r2, r0, #1
 8000840:	eb01 0541 	add.w	r5, r1, r1, lsl #1
 8000844:	fbb2 f2f5 	udiv	r2, r2, r5
 8000848:	3201      	adds	r2, #1
 800084a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800084e:	fab2 f282 	clz	r2, r2
 8000852:	0952      	lsrs	r2, r2, #5
 8000854:	bb42      	cbnz	r2, 80008a8 <HAL_I2C_Init+0x14c>
 8000856:	b9c3      	cbnz	r3, 800088a <HAL_I2C_Init+0x12e>
 8000858:	3801      	subs	r0, #1
 800085a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800085e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000862:	3301      	adds	r3, #1
 8000864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800086c:	e7b1      	b.n	80007d2 <HAL_I2C_Init+0x76>
 800086e:	1e42      	subs	r2, r0, #1
 8000870:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8000874:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8000878:	fbb2 f2f5 	udiv	r2, r2, r5
 800087c:	3201      	adds	r2, #1
 800087e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000882:	fab2 f282 	clz	r2, r2
 8000886:	0952      	lsrs	r2, r2, #5
 8000888:	e7e4      	b.n	8000854 <HAL_I2C_Init+0xf8>
 800088a:	3801      	subs	r0, #1
 800088c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8000890:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000894:	fbb0 f3f3 	udiv	r3, r0, r3
 8000898:	3301      	adds	r3, #1
 800089a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800089e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008a2:	e796      	b.n	80007d2 <HAL_I2C_Init+0x76>
 80008a4:	2304      	movs	r3, #4
 80008a6:	e794      	b.n	80007d2 <HAL_I2C_Init+0x76>
 80008a8:	2301      	movs	r3, #1
 80008aa:	e792      	b.n	80007d2 <HAL_I2C_Init+0x76>
    return HAL_ERROR;
 80008ac:	2001      	movs	r0, #1
}
 80008ae:	4770      	bx	lr
    return HAL_ERROR;
 80008b0:	2001      	movs	r0, #1
 80008b2:	e7ac      	b.n	800080e <HAL_I2C_Init+0xb2>
 80008b4:	000186a0 	.word	0x000186a0
 80008b8:	001e847f 	.word	0x001e847f
 80008bc:	431bde83 	.word	0x431bde83
 80008c0:	003d08ff 	.word	0x003d08ff
 80008c4:	10624dd3 	.word	0x10624dd3

080008c8 <HAL_I2C_Master_Transmit>:
{
 80008c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008cc:	b085      	sub	sp, #20
 80008ce:	4604      	mov	r4, r0
 80008d0:	460f      	mov	r7, r1
 80008d2:	4691      	mov	r9, r2
 80008d4:	4698      	mov	r8, r3
 80008d6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 80008d8:	f7ff fc7a 	bl	80001d0 <HAL_GetTick>
 80008dc:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80008de:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80008e2:	b2c0      	uxtb	r0, r0
 80008e4:	2820      	cmp	r0, #32
 80008e6:	d004      	beq.n	80008f2 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 80008e8:	2702      	movs	r7, #2
}
 80008ea:	4638      	mov	r0, r7
 80008ec:	b005      	add	sp, #20
 80008ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80008f2:	9500      	str	r5, [sp, #0]
 80008f4:	2319      	movs	r3, #25
 80008f6:	2201      	movs	r2, #1
 80008f8:	4955      	ldr	r1, [pc, #340]	; (8000a50 <HAL_I2C_Master_Transmit+0x188>)
 80008fa:	4620      	mov	r0, r4
 80008fc:	f7ff fe03 	bl	8000506 <I2C_WaitOnFlagUntilTimeout>
 8000900:	2800      	cmp	r0, #0
 8000902:	f040 80a0 	bne.w	8000a46 <HAL_I2C_Master_Transmit+0x17e>
    __HAL_LOCK(hi2c);
 8000906:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800090a:	2b01      	cmp	r3, #1
 800090c:	f000 809d 	beq.w	8000a4a <HAL_I2C_Master_Transmit+0x182>
 8000910:	2301      	movs	r3, #1
 8000912:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000916:	6823      	ldr	r3, [r4, #0]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	f012 0f01 	tst.w	r2, #1
 800091e:	d103      	bne.n	8000928 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	f042 0201 	orr.w	r2, r2, #1
 8000926:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000928:	6822      	ldr	r2, [r4, #0]
 800092a:	6813      	ldr	r3, [r2, #0]
 800092c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000930:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000932:	2321      	movs	r3, #33	; 0x21
 8000934:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000938:	2310      	movs	r3, #16
 800093a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800093e:	2300      	movs	r3, #0
 8000940:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8000942:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000946:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800094a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800094e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000950:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000952:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000954:	462b      	mov	r3, r5
 8000956:	4632      	mov	r2, r6
 8000958:	4639      	mov	r1, r7
 800095a:	4620      	mov	r0, r4
 800095c:	f7ff fe54 	bl	8000608 <I2C_MasterRequestWrite>
 8000960:	4607      	mov	r7, r0
 8000962:	b160      	cbz	r0, 800097e <HAL_I2C_Master_Transmit+0xb6>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000964:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000966:	2b04      	cmp	r3, #4
 8000968:	d004      	beq.n	8000974 <HAL_I2C_Master_Transmit+0xac>
        __HAL_UNLOCK(hi2c);
 800096a:	2300      	movs	r3, #0
 800096c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000970:	2703      	movs	r7, #3
 8000972:	e7ba      	b.n	80008ea <HAL_I2C_Master_Transmit+0x22>
        __HAL_UNLOCK(hi2c);
 8000974:	2300      	movs	r3, #0
 8000976:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800097a:	2701      	movs	r7, #1
 800097c:	e7b5      	b.n	80008ea <HAL_I2C_Master_Transmit+0x22>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800097e:	2300      	movs	r3, #0
 8000980:	9303      	str	r3, [sp, #12]
 8000982:	6823      	ldr	r3, [r4, #0]
 8000984:	695a      	ldr	r2, [r3, #20]
 8000986:	9203      	str	r2, [sp, #12]
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	9303      	str	r3, [sp, #12]
 800098c:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 800098e:	e012      	b.n	80009b6 <HAL_I2C_Master_Transmit+0xee>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000990:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000992:	2b04      	cmp	r3, #4
 8000994:	d001      	beq.n	800099a <HAL_I2C_Master_Transmit+0xd2>
          return HAL_TIMEOUT;
 8000996:	2703      	movs	r7, #3
 8000998:	e7a7      	b.n	80008ea <HAL_I2C_Master_Transmit+0x22>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800099a:	6822      	ldr	r2, [r4, #0]
 800099c:	6813      	ldr	r3, [r2, #0]
 800099e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009a2:	6013      	str	r3, [r2, #0]
          return HAL_ERROR;
 80009a4:	2701      	movs	r7, #1
 80009a6:	e7a0      	b.n	80008ea <HAL_I2C_Master_Transmit+0x22>
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009a8:	462a      	mov	r2, r5
 80009aa:	4631      	mov	r1, r6
 80009ac:	4620      	mov	r0, r4
 80009ae:	f7ff feae 	bl	800070e <I2C_WaitOnBTFFlagUntilTimeout>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	d12d      	bne.n	8000a12 <HAL_I2C_Master_Transmit+0x14a>
    while(hi2c->XferSize > 0U)
 80009b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d036      	beq.n	8000a2a <HAL_I2C_Master_Transmit+0x162>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009bc:	462a      	mov	r2, r5
 80009be:	4631      	mov	r1, r6
 80009c0:	4620      	mov	r0, r4
 80009c2:	f7ff fe7d 	bl	80006c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	d1e2      	bne.n	8000990 <HAL_I2C_Master_Transmit+0xc8>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80009ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80009cc:	1c5a      	adds	r2, r3, #1
 80009ce:	6262      	str	r2, [r4, #36]	; 0x24
 80009d0:	6822      	ldr	r2, [r4, #0]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 80009d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80009d8:	b29b      	uxth	r3, r3
 80009da:	3b01      	subs	r3, #1
 80009dc:	b29b      	uxth	r3, r3
 80009de:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80009e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80009e2:	3b01      	subs	r3, #1
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80009e8:	6822      	ldr	r2, [r4, #0]
 80009ea:	6951      	ldr	r1, [r2, #20]
 80009ec:	f011 0f04 	tst.w	r1, #4
 80009f0:	d0da      	beq.n	80009a8 <HAL_I2C_Master_Transmit+0xe0>
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d0d8      	beq.n	80009a8 <HAL_I2C_Master_Transmit+0xe0>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80009f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80009f8:	1c59      	adds	r1, r3, #1
 80009fa:	6261      	str	r1, [r4, #36]	; 0x24
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8000a00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	3b01      	subs	r3, #1
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000a0a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	8523      	strh	r3, [r4, #40]	; 0x28
 8000a10:	e7ca      	b.n	80009a8 <HAL_I2C_Master_Transmit+0xe0>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a14:	2b04      	cmp	r3, #4
 8000a16:	d001      	beq.n	8000a1c <HAL_I2C_Master_Transmit+0x154>
          return HAL_TIMEOUT;
 8000a18:	2703      	movs	r7, #3
 8000a1a:	e766      	b.n	80008ea <HAL_I2C_Master_Transmit+0x22>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000a1c:	6822      	ldr	r2, [r4, #0]
 8000a1e:	6813      	ldr	r3, [r2, #0]
 8000a20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a24:	6013      	str	r3, [r2, #0]
          return HAL_ERROR;
 8000a26:	2701      	movs	r7, #1
 8000a28:	e75f      	b.n	80008ea <HAL_I2C_Master_Transmit+0x22>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000a2a:	6822      	ldr	r2, [r4, #0]
 8000a2c:	6813      	ldr	r3, [r2, #0]
 8000a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a32:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000a34:	2320      	movs	r3, #32
 8000a36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8000a40:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000a44:	e751      	b.n	80008ea <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8000a46:	2702      	movs	r7, #2
 8000a48:	e74f      	b.n	80008ea <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8000a4a:	2702      	movs	r7, #2
 8000a4c:	e74d      	b.n	80008ea <HAL_I2C_Master_Transmit+0x22>
 8000a4e:	bf00      	nop
 8000a50:	00100002 	.word	0x00100002

08000a54 <HAL_I2C_IsDeviceReady>:
{
 8000a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a58:	b085      	sub	sp, #20
 8000a5a:	4606      	mov	r6, r0
 8000a5c:	468a      	mov	sl, r1
 8000a5e:	4693      	mov	fp, r2
 8000a60:	461f      	mov	r7, r3
  tickstart = HAL_GetTick();
 8000a62:	f7ff fbb5 	bl	80001d0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000a66:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2b20      	cmp	r3, #32
 8000a6e:	d003      	beq.n	8000a78 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8000a70:	2002      	movs	r0, #2
}
 8000a72:	b005      	add	sp, #20
 8000a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a78:	4680      	mov	r8, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000a7a:	9000      	str	r0, [sp, #0]
 8000a7c:	2319      	movs	r3, #25
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4958      	ldr	r1, [pc, #352]	; (8000be4 <HAL_I2C_IsDeviceReady+0x190>)
 8000a82:	4630      	mov	r0, r6
 8000a84:	f7ff fd3f 	bl	8000506 <I2C_WaitOnFlagUntilTimeout>
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	f040 80a0 	bne.w	8000bce <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 8000a8e:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	f000 809d 	beq.w	8000bd2 <HAL_I2C_IsDeviceReady+0x17e>
 8000a98:	2301      	movs	r3, #1
 8000a9a:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000a9e:	6833      	ldr	r3, [r6, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	f012 0f01 	tst.w	r2, #1
 8000aa6:	d103      	bne.n	8000ab0 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	f042 0201 	orr.w	r2, r2, #1
 8000aae:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000ab0:	6832      	ldr	r2, [r6, #0]
 8000ab2:	6813      	ldr	r3, [r2, #0]
 8000ab4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ab8:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000aba:	2324      	movs	r3, #36	; 0x24
 8000abc:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	6433      	str	r3, [r6, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ac4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8000ac8:	62f3      	str	r3, [r6, #44]	; 0x2c
  uint32_t tickstart = 0U, tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, I2C_Trials = 1U;
 8000aca:	f04f 0901 	mov.w	r9, #1
 8000ace:	e038      	b.n	8000b42 <HAL_I2C_IsDeviceReady+0xee>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8000ad0:	23a0      	movs	r3, #160	; 0xa0
 8000ad2:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000ad6:	6833      	ldr	r3, [r6, #0]
 8000ad8:	695c      	ldr	r4, [r3, #20]
 8000ada:	f3c4 0440 	ubfx	r4, r4, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000ade:	695d      	ldr	r5, [r3, #20]
 8000ae0:	f3c5 2580 	ubfx	r5, r5, #10, #1
        tmp3 = hi2c->State;
 8000ae4:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
 8000ae8:	b2db      	uxtb	r3, r3
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8000aea:	b95c      	cbnz	r4, 8000b04 <HAL_I2C_IsDeviceReady+0xb0>
 8000aec:	b955      	cbnz	r5, 8000b04 <HAL_I2C_IsDeviceReady+0xb0>
 8000aee:	2ba0      	cmp	r3, #160	; 0xa0
 8000af0:	d008      	beq.n	8000b04 <HAL_I2C_IsDeviceReady+0xb0>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000af2:	2f00      	cmp	r7, #0
 8000af4:	d0ec      	beq.n	8000ad0 <HAL_I2C_IsDeviceReady+0x7c>
 8000af6:	f7ff fb6b 	bl	80001d0 <HAL_GetTick>
 8000afa:	eba0 0008 	sub.w	r0, r0, r8
 8000afe:	42b8      	cmp	r0, r7
 8000b00:	d9e9      	bls.n	8000ad6 <HAL_I2C_IsDeviceReady+0x82>
 8000b02:	e7e5      	b.n	8000ad0 <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->State = HAL_I2C_STATE_READY;
 8000b04:	2320      	movs	r3, #32
 8000b06:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8000b0a:	6833      	ldr	r3, [r6, #0]
 8000b0c:	695a      	ldr	r2, [r3, #20]
 8000b0e:	f012 0f02 	tst.w	r2, #2
 8000b12:	d138      	bne.n	8000b86 <HAL_I2C_IsDeviceReady+0x132>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b1a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b1c:	6833      	ldr	r3, [r6, #0]
 8000b1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000b22:	615a      	str	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000b24:	f8cd 8000 	str.w	r8, [sp]
 8000b28:	2319      	movs	r3, #25
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	492d      	ldr	r1, [pc, #180]	; (8000be4 <HAL_I2C_IsDeviceReady+0x190>)
 8000b2e:	4630      	mov	r0, r6
 8000b30:	f7ff fce9 	bl	8000506 <I2C_WaitOnFlagUntilTimeout>
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d152      	bne.n	8000bde <HAL_I2C_IsDeviceReady+0x18a>
    }while(I2C_Trials++ < Trials);
 8000b38:	f109 0301 	add.w	r3, r9, #1
 8000b3c:	45d9      	cmp	r9, fp
 8000b3e:	d23e      	bcs.n	8000bbe <HAL_I2C_IsDeviceReady+0x16a>
 8000b40:	4699      	mov	r9, r3
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8000b42:	6832      	ldr	r2, [r6, #0]
 8000b44:	6813      	ldr	r3, [r2, #0]
 8000b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4a:	6013      	str	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000b4c:	f8cd 8000 	str.w	r8, [sp]
 8000b50:	463b      	mov	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000b58:	4630      	mov	r0, r6
 8000b5a:	f7ff fcd4 	bl	8000506 <I2C_WaitOnFlagUntilTimeout>
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	d139      	bne.n	8000bd6 <HAL_I2C_IsDeviceReady+0x182>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000b62:	6833      	ldr	r3, [r6, #0]
 8000b64:	f00a 02fe 	and.w	r2, sl, #254	; 0xfe
 8000b68:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8000b6a:	f7ff fb31 	bl	80001d0 <HAL_GetTick>
 8000b6e:	4680      	mov	r8, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000b70:	6833      	ldr	r3, [r6, #0]
 8000b72:	695c      	ldr	r4, [r3, #20]
 8000b74:	f3c4 0440 	ubfx	r4, r4, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000b78:	695d      	ldr	r5, [r3, #20]
 8000b7a:	f3c5 2580 	ubfx	r5, r5, #10, #1
      tmp3 = hi2c->State;
 8000b7e:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
 8000b82:	b2db      	uxtb	r3, r3
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8000b84:	e7b1      	b.n	8000aea <HAL_I2C_IsDeviceReady+0x96>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b8c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b8e:	2300      	movs	r3, #0
 8000b90:	9303      	str	r3, [sp, #12]
 8000b92:	6833      	ldr	r3, [r6, #0]
 8000b94:	695a      	ldr	r2, [r3, #20]
 8000b96:	9203      	str	r2, [sp, #12]
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	9303      	str	r3, [sp, #12]
 8000b9c:	9b03      	ldr	r3, [sp, #12]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000b9e:	f8cd 8000 	str.w	r8, [sp]
 8000ba2:	2319      	movs	r3, #25
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	490f      	ldr	r1, [pc, #60]	; (8000be4 <HAL_I2C_IsDeviceReady+0x190>)
 8000ba8:	4630      	mov	r0, r6
 8000baa:	f7ff fcac 	bl	8000506 <I2C_WaitOnFlagUntilTimeout>
 8000bae:	b9a0      	cbnz	r0, 8000bda <HAL_I2C_IsDeviceReady+0x186>
        hi2c->State = HAL_I2C_STATE_READY;
 8000bb0:	2320      	movs	r3, #32
 8000bb2:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_OK;
 8000bbc:	e759      	b.n	8000a72 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8000bbe:	2320      	movs	r3, #32
 8000bc0:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
    return HAL_ERROR;
 8000bca:	2001      	movs	r0, #1
 8000bcc:	e751      	b.n	8000a72 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8000bce:	2002      	movs	r0, #2
 8000bd0:	e74f      	b.n	8000a72 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	e74d      	b.n	8000a72 <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_TIMEOUT;
 8000bd6:	2003      	movs	r0, #3
 8000bd8:	e74b      	b.n	8000a72 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_TIMEOUT;
 8000bda:	2003      	movs	r0, #3
 8000bdc:	e749      	b.n	8000a72 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_TIMEOUT;
 8000bde:	2003      	movs	r0, #3
 8000be0:	e747      	b.n	8000a72 <HAL_I2C_IsDeviceReady+0x1e>
 8000be2:	bf00      	nop
 8000be4:	00100002 	.word	0x00100002

08000be8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000be8:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <RCC_Delay+0x24>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <RCC_Delay+0x28>)
 8000bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf4:	0a5b      	lsrs	r3, r3, #9
 8000bf6:	fb00 f303 	mul.w	r3, r0, r3
 8000bfa:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000bfc:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000bfe:	9b01      	ldr	r3, [sp, #4]
 8000c00:	1e5a      	subs	r2, r3, #1
 8000c02:	9201      	str	r2, [sp, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1f9      	bne.n	8000bfc <RCC_Delay+0x14>
}
 8000c08:	b002      	add	sp, #8
 8000c0a:	4770      	bx	lr
 8000c0c:	20000020 	.word	0x20000020
 8000c10:	10624dd3 	.word	0x10624dd3

08000c14 <HAL_RCC_OscConfig>:
{
 8000c14:	b570      	push	{r4, r5, r6, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c1a:	6803      	ldr	r3, [r0, #0]
 8000c1c:	f013 0f01 	tst.w	r3, #1
 8000c20:	d02c      	beq.n	8000c7c <HAL_RCC_OscConfig+0x68>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c22:	4bab      	ldr	r3, [pc, #684]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f003 030c 	and.w	r3, r3, #12
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d01d      	beq.n	8000c6a <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c2e:	4ba8      	ldr	r3, [pc, #672]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f003 030c 	and.w	r3, r3, #12
 8000c36:	2b08      	cmp	r3, #8
 8000c38:	d012      	beq.n	8000c60 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c3a:	6863      	ldr	r3, [r4, #4]
 8000c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c40:	d041      	beq.n	8000cc6 <HAL_RCC_OscConfig+0xb2>
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d155      	bne.n	8000cf2 <HAL_RCC_OscConfig+0xde>
 8000c46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c4a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	e037      	b.n	8000cd0 <HAL_RCC_OscConfig+0xbc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c60:	4b9b      	ldr	r3, [pc, #620]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000c68:	d0e7      	beq.n	8000c3a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c6a:	4b99      	ldr	r3, [pc, #612]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c72:	d003      	beq.n	8000c7c <HAL_RCC_OscConfig+0x68>
 8000c74:	6863      	ldr	r3, [r4, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f000 81ae 	beq.w	8000fd8 <HAL_RCC_OscConfig+0x3c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c7c:	6823      	ldr	r3, [r4, #0]
 8000c7e:	f013 0f02 	tst.w	r3, #2
 8000c82:	d075      	beq.n	8000d70 <HAL_RCC_OscConfig+0x15c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c84:	4b92      	ldr	r3, [pc, #584]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f013 0f0c 	tst.w	r3, #12
 8000c8c:	d05f      	beq.n	8000d4e <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c8e:	4b90      	ldr	r3, [pc, #576]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f003 030c 	and.w	r3, r3, #12
 8000c96:	2b08      	cmp	r3, #8
 8000c98:	d054      	beq.n	8000d44 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c9a:	6923      	ldr	r3, [r4, #16]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	f000 8089 	beq.w	8000db4 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_HSI_ENABLE();
 8000ca2:	4b8c      	ldr	r3, [pc, #560]	; (8000ed4 <HAL_RCC_OscConfig+0x2c0>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ca8:	f7ff fa92 	bl	80001d0 <HAL_GetTick>
 8000cac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cae:	4b88      	ldr	r3, [pc, #544]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f013 0f02 	tst.w	r3, #2
 8000cb6:	d174      	bne.n	8000da2 <HAL_RCC_OscConfig+0x18e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cb8:	f7ff fa8a 	bl	80001d0 <HAL_GetTick>
 8000cbc:	1b40      	subs	r0, r0, r5
 8000cbe:	2802      	cmp	r0, #2
 8000cc0:	d9f5      	bls.n	8000cae <HAL_RCC_OscConfig+0x9a>
            return HAL_TIMEOUT;
 8000cc2:	2003      	movs	r0, #3
 8000cc4:	e18d      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cc6:	4a82      	ldr	r2, [pc, #520]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000cc8:	6813      	ldr	r3, [r2, #0]
 8000cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cce:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cd0:	6863      	ldr	r3, [r4, #4]
 8000cd2:	b343      	cbz	r3, 8000d26 <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8000cd4:	f7ff fa7c 	bl	80001d0 <HAL_GetTick>
 8000cd8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cda:	4b7d      	ldr	r3, [pc, #500]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ce2:	d1cb      	bne.n	8000c7c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ce4:	f7ff fa74 	bl	80001d0 <HAL_GetTick>
 8000ce8:	1b40      	subs	r0, r0, r5
 8000cea:	2864      	cmp	r0, #100	; 0x64
 8000cec:	d9f5      	bls.n	8000cda <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8000cee:	2003      	movs	r0, #3
 8000cf0:	e177      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cf6:	d009      	beq.n	8000d0c <HAL_RCC_OscConfig+0xf8>
 8000cf8:	4b75      	ldr	r3, [pc, #468]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	e7e1      	b.n	8000cd0 <HAL_RCC_OscConfig+0xbc>
 8000d0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d10:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	e7d4      	b.n	8000cd0 <HAL_RCC_OscConfig+0xbc>
        tickstart = HAL_GetTick();
 8000d26:	f7ff fa53 	bl	80001d0 <HAL_GetTick>
 8000d2a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d2c:	4b68      	ldr	r3, [pc, #416]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d34:	d0a2      	beq.n	8000c7c <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d36:	f7ff fa4b 	bl	80001d0 <HAL_GetTick>
 8000d3a:	1b40      	subs	r0, r0, r5
 8000d3c:	2864      	cmp	r0, #100	; 0x64
 8000d3e:	d9f5      	bls.n	8000d2c <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8000d40:	2003      	movs	r0, #3
 8000d42:	e14e      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d44:	4b62      	ldr	r3, [pc, #392]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000d4c:	d1a5      	bne.n	8000c9a <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d4e:	4b60      	ldr	r3, [pc, #384]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f013 0f02 	tst.w	r3, #2
 8000d56:	d003      	beq.n	8000d60 <HAL_RCC_OscConfig+0x14c>
 8000d58:	6923      	ldr	r3, [r4, #16]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	f040 813e 	bne.w	8000fdc <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d60:	4a5b      	ldr	r2, [pc, #364]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000d62:	6813      	ldr	r3, [r2, #0]
 8000d64:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d68:	6961      	ldr	r1, [r4, #20]
 8000d6a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d6e:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d70:	6823      	ldr	r3, [r4, #0]
 8000d72:	f013 0f08 	tst.w	r3, #8
 8000d76:	d032      	beq.n	8000dde <HAL_RCC_OscConfig+0x1ca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d78:	69a3      	ldr	r3, [r4, #24]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d045      	beq.n	8000e0a <HAL_RCC_OscConfig+0x1f6>
      __HAL_RCC_LSI_ENABLE();
 8000d7e:	4b56      	ldr	r3, [pc, #344]	; (8000ed8 <HAL_RCC_OscConfig+0x2c4>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d84:	f7ff fa24 	bl	80001d0 <HAL_GetTick>
 8000d88:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d8a:	4b51      	ldr	r3, [pc, #324]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8e:	f013 0f02 	tst.w	r3, #2
 8000d92:	d121      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d94:	f7ff fa1c 	bl	80001d0 <HAL_GetTick>
 8000d98:	1b40      	subs	r0, r0, r5
 8000d9a:	2802      	cmp	r0, #2
 8000d9c:	d9f5      	bls.n	8000d8a <HAL_RCC_OscConfig+0x176>
          return HAL_TIMEOUT;
 8000d9e:	2003      	movs	r0, #3
 8000da0:	e11f      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da2:	4a4b      	ldr	r2, [pc, #300]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000da4:	6813      	ldr	r3, [r2, #0]
 8000da6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000daa:	6961      	ldr	r1, [r4, #20]
 8000dac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	e7dd      	b.n	8000d70 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8000db4:	4b47      	ldr	r3, [pc, #284]	; (8000ed4 <HAL_RCC_OscConfig+0x2c0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dba:	f7ff fa09 	bl	80001d0 <HAL_GetTick>
 8000dbe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dc0:	4b43      	ldr	r3, [pc, #268]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f013 0f02 	tst.w	r3, #2
 8000dc8:	d0d2      	beq.n	8000d70 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dca:	f7ff fa01 	bl	80001d0 <HAL_GetTick>
 8000dce:	1b40      	subs	r0, r0, r5
 8000dd0:	2802      	cmp	r0, #2
 8000dd2:	d9f5      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x1ac>
            return HAL_TIMEOUT;
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	e104      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3ce>
      RCC_Delay(1);
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f7ff ff05 	bl	8000be8 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	f013 0f04 	tst.w	r3, #4
 8000de4:	f000 8098 	beq.w	8000f18 <HAL_RCC_OscConfig+0x304>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000de8:	4b39      	ldr	r3, [pc, #228]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000df0:	d11d      	bne.n	8000e2e <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	4b37      	ldr	r3, [pc, #220]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000df4:	69da      	ldr	r2, [r3, #28]
 8000df6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000dfa:	61da      	str	r2, [r3, #28]
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e06:	2501      	movs	r5, #1
 8000e08:	e012      	b.n	8000e30 <HAL_RCC_OscConfig+0x21c>
      __HAL_RCC_LSI_DISABLE();
 8000e0a:	4b33      	ldr	r3, [pc, #204]	; (8000ed8 <HAL_RCC_OscConfig+0x2c4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e10:	f7ff f9de 	bl	80001d0 <HAL_GetTick>
 8000e14:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e16:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1a:	f013 0f02 	tst.w	r3, #2
 8000e1e:	d0de      	beq.n	8000dde <HAL_RCC_OscConfig+0x1ca>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e20:	f7ff f9d6 	bl	80001d0 <HAL_GetTick>
 8000e24:	1b40      	subs	r0, r0, r5
 8000e26:	2802      	cmp	r0, #2
 8000e28:	d9f5      	bls.n	8000e16 <HAL_RCC_OscConfig+0x202>
          return HAL_TIMEOUT;
 8000e2a:	2003      	movs	r0, #3
 8000e2c:	e0d9      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3ce>
    FlagStatus       pwrclkchanged = RESET;
 8000e2e:	2500      	movs	r5, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e30:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <HAL_RCC_OscConfig+0x2c8>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000e38:	d011      	beq.n	8000e5e <HAL_RCC_OscConfig+0x24a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e3a:	68e3      	ldr	r3, [r4, #12]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d022      	beq.n	8000e86 <HAL_RCC_OscConfig+0x272>
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d138      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x2a2>
 8000e44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e48:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000e4c:	6a1a      	ldr	r2, [r3, #32]
 8000e4e:	f022 0201 	bic.w	r2, r2, #1
 8000e52:	621a      	str	r2, [r3, #32]
 8000e54:	6a1a      	ldr	r2, [r3, #32]
 8000e56:	f022 0204 	bic.w	r2, r2, #4
 8000e5a:	621a      	str	r2, [r3, #32]
 8000e5c:	e018      	b.n	8000e90 <HAL_RCC_OscConfig+0x27c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e5e:	4a1f      	ldr	r2, [pc, #124]	; (8000edc <HAL_RCC_OscConfig+0x2c8>)
 8000e60:	6813      	ldr	r3, [r2, #0]
 8000e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e66:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000e68:	f7ff f9b2 	bl	80001d0 <HAL_GetTick>
 8000e6c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e6e:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <HAL_RCC_OscConfig+0x2c8>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000e76:	d1e0      	bne.n	8000e3a <HAL_RCC_OscConfig+0x226>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e78:	f7ff f9aa 	bl	80001d0 <HAL_GetTick>
 8000e7c:	1b80      	subs	r0, r0, r6
 8000e7e:	2864      	cmp	r0, #100	; 0x64
 8000e80:	d9f5      	bls.n	8000e6e <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8000e82:	2003      	movs	r0, #3
 8000e84:	e0ad      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000e88:	6a13      	ldr	r3, [r2, #32]
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e90:	68e3      	ldr	r3, [r4, #12]
 8000e92:	b37b      	cbz	r3, 8000ef4 <HAL_RCC_OscConfig+0x2e0>
      tickstart = HAL_GetTick();
 8000e94:	f7ff f99c 	bl	80001d0 <HAL_GetTick>
 8000e98:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000e9c:	6a1b      	ldr	r3, [r3, #32]
 8000e9e:	f013 0f02 	tst.w	r3, #2
 8000ea2:	d138      	bne.n	8000f16 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ea4:	f7ff f994 	bl	80001d0 <HAL_GetTick>
 8000ea8:	1b80      	subs	r0, r0, r6
 8000eaa:	f241 3388 	movw	r3, #5000	; 0x1388
 8000eae:	4298      	cmp	r0, r3
 8000eb0:	d9f3      	bls.n	8000e9a <HAL_RCC_OscConfig+0x286>
          return HAL_TIMEOUT;
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	e095      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb6:	2b05      	cmp	r3, #5
 8000eb8:	d012      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x2cc>
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_RCC_OscConfig+0x2bc>)
 8000ebc:	6a1a      	ldr	r2, [r3, #32]
 8000ebe:	f022 0201 	bic.w	r2, r2, #1
 8000ec2:	621a      	str	r2, [r3, #32]
 8000ec4:	6a1a      	ldr	r2, [r3, #32]
 8000ec6:	f022 0204 	bic.w	r2, r2, #4
 8000eca:	621a      	str	r2, [r3, #32]
 8000ecc:	e7e0      	b.n	8000e90 <HAL_RCC_OscConfig+0x27c>
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	42420000 	.word	0x42420000
 8000ed8:	42420480 	.word	0x42420480
 8000edc:	40007000 	.word	0x40007000
 8000ee0:	4b42      	ldr	r3, [pc, #264]	; (8000fec <HAL_RCC_OscConfig+0x3d8>)
 8000ee2:	6a1a      	ldr	r2, [r3, #32]
 8000ee4:	f042 0204 	orr.w	r2, r2, #4
 8000ee8:	621a      	str	r2, [r3, #32]
 8000eea:	6a1a      	ldr	r2, [r3, #32]
 8000eec:	f042 0201 	orr.w	r2, r2, #1
 8000ef0:	621a      	str	r2, [r3, #32]
 8000ef2:	e7cd      	b.n	8000e90 <HAL_RCC_OscConfig+0x27c>
      tickstart = HAL_GetTick();
 8000ef4:	f7ff f96c 	bl	80001d0 <HAL_GetTick>
 8000ef8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000efa:	4b3c      	ldr	r3, [pc, #240]	; (8000fec <HAL_RCC_OscConfig+0x3d8>)
 8000efc:	6a1b      	ldr	r3, [r3, #32]
 8000efe:	f013 0f02 	tst.w	r3, #2
 8000f02:	d008      	beq.n	8000f16 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f04:	f7ff f964 	bl	80001d0 <HAL_GetTick>
 8000f08:	1b80      	subs	r0, r0, r6
 8000f0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f0e:	4298      	cmp	r0, r3
 8000f10:	d9f3      	bls.n	8000efa <HAL_RCC_OscConfig+0x2e6>
          return HAL_TIMEOUT;
 8000f12:	2003      	movs	r0, #3
 8000f14:	e065      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3ce>
    if(pwrclkchanged == SET)
 8000f16:	b9e5      	cbnz	r5, 8000f52 <HAL_RCC_OscConfig+0x33e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f18:	69e3      	ldr	r3, [r4, #28]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d060      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x3cc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f1e:	4a33      	ldr	r2, [pc, #204]	; (8000fec <HAL_RCC_OscConfig+0x3d8>)
 8000f20:	6852      	ldr	r2, [r2, #4]
 8000f22:	f002 020c 	and.w	r2, r2, #12
 8000f26:	2a08      	cmp	r2, #8
 8000f28:	d05d      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d017      	beq.n	8000f5e <HAL_RCC_OscConfig+0x34a>
        __HAL_RCC_PLL_DISABLE();
 8000f2e:	4b30      	ldr	r3, [pc, #192]	; (8000ff0 <HAL_RCC_OscConfig+0x3dc>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f34:	f7ff f94c 	bl	80001d0 <HAL_GetTick>
 8000f38:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f3a:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <HAL_RCC_OscConfig+0x3d8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f42:	d047      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f44:	f7ff f944 	bl	80001d0 <HAL_GetTick>
 8000f48:	1b00      	subs	r0, r0, r4
 8000f4a:	2802      	cmp	r0, #2
 8000f4c:	d9f5      	bls.n	8000f3a <HAL_RCC_OscConfig+0x326>
            return HAL_TIMEOUT;
 8000f4e:	2003      	movs	r0, #3
 8000f50:	e047      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f52:	4a26      	ldr	r2, [pc, #152]	; (8000fec <HAL_RCC_OscConfig+0x3d8>)
 8000f54:	69d3      	ldr	r3, [r2, #28]
 8000f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	61d3      	str	r3, [r2, #28]
 8000f5c:	e7dc      	b.n	8000f18 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_DISABLE();
 8000f5e:	4b24      	ldr	r3, [pc, #144]	; (8000ff0 <HAL_RCC_OscConfig+0x3dc>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f64:	f7ff f934 	bl	80001d0 <HAL_GetTick>
 8000f68:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <HAL_RCC_OscConfig+0x3d8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f72:	d006      	beq.n	8000f82 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f74:	f7ff f92c 	bl	80001d0 <HAL_GetTick>
 8000f78:	1b40      	subs	r0, r0, r5
 8000f7a:	2802      	cmp	r0, #2
 8000f7c:	d9f5      	bls.n	8000f6a <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 8000f7e:	2003      	movs	r0, #3
 8000f80:	e02f      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3ce>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f82:	6a23      	ldr	r3, [r4, #32]
 8000f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f88:	d01a      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f8a:	4918      	ldr	r1, [pc, #96]	; (8000fec <HAL_RCC_OscConfig+0x3d8>)
 8000f8c:	684b      	ldr	r3, [r1, #4]
 8000f8e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000f92:	6a22      	ldr	r2, [r4, #32]
 8000f94:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000f96:	4302      	orrs	r2, r0
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <HAL_RCC_OscConfig+0x3dc>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fa2:	f7ff f915 	bl	80001d0 <HAL_GetTick>
 8000fa6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_RCC_OscConfig+0x3d8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000fb0:	d10e      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb2:	f7ff f90d 	bl	80001d0 <HAL_GetTick>
 8000fb6:	1b00      	subs	r0, r0, r4
 8000fb8:	2802      	cmp	r0, #2
 8000fba:	d9f5      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x394>
            return HAL_TIMEOUT;
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	e010      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3ce>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <HAL_RCC_OscConfig+0x3d8>)
 8000fc2:	6853      	ldr	r3, [r2, #4]
 8000fc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000fc8:	68a1      	ldr	r1, [r4, #8]
 8000fca:	430b      	orrs	r3, r1
 8000fcc:	6053      	str	r3, [r2, #4]
 8000fce:	e7dc      	b.n	8000f8a <HAL_RCC_OscConfig+0x376>
  return HAL_OK;
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	e006      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3ce>
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	e004      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3ce>
        return HAL_ERROR;
 8000fd8:	2001      	movs	r0, #1
 8000fda:	e002      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3ce>
        return HAL_ERROR;
 8000fdc:	2001      	movs	r0, #1
 8000fde:	e000      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3ce>
  return HAL_OK;
 8000fe0:	2000      	movs	r0, #0
}
 8000fe2:	b002      	add	sp, #8
 8000fe4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	e7fb      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3ce>
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	42420060 	.word	0x42420060

08000ff4 <HAL_RCC_GetSysClockFreq>:
{
 8000ff4:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000ff8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ffa:	f10d 0c18 	add.w	ip, sp, #24
 8000ffe:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001002:	f240 2301 	movw	r3, #513	; 0x201
 8001006:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_RCC_GetSysClockFreq+0x60>)
 800100c:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800100e:	f003 020c 	and.w	r2, r3, #12
 8001012:	2a08      	cmp	r2, #8
 8001014:	d002      	beq.n	800101c <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8001016:	4810      	ldr	r0, [pc, #64]	; (8001058 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001018:	b006      	add	sp, #24
 800101a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800101c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001020:	4462      	add	r2, ip
 8001022:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001026:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800102a:	d00c      	beq.n	8001046 <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_RCC_GetSysClockFreq+0x60>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001034:	4463      	add	r3, ip
 8001036:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800103a:	4807      	ldr	r0, [pc, #28]	; (8001058 <HAL_RCC_GetSysClockFreq+0x64>)
 800103c:	fb00 f002 	mul.w	r0, r0, r2
 8001040:	fbb0 f0f3 	udiv	r0, r0, r3
 8001044:	e7e8      	b.n	8001018 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <HAL_RCC_GetSysClockFreq+0x68>)
 8001048:	fb00 f002 	mul.w	r0, r0, r2
 800104c:	e7e4      	b.n	8001018 <HAL_RCC_GetSysClockFreq+0x24>
 800104e:	bf00      	nop
 8001050:	08004180 	.word	0x08004180
 8001054:	40021000 	.word	0x40021000
 8001058:	007a1200 	.word	0x007a1200
 800105c:	003d0900 	.word	0x003d0900

08001060 <HAL_RCC_ClockConfig>:
{
 8001060:	b570      	push	{r4, r5, r6, lr}
 8001062:	4604      	mov	r4, r0
 8001064:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001066:	4b61      	ldr	r3, [pc, #388]	; (80011ec <HAL_RCC_ClockConfig+0x18c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	428b      	cmp	r3, r1
 8001070:	d20b      	bcs.n	800108a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001072:	4a5e      	ldr	r2, [pc, #376]	; (80011ec <HAL_RCC_ClockConfig+0x18c>)
 8001074:	6813      	ldr	r3, [r2, #0]
 8001076:	f023 0307 	bic.w	r3, r3, #7
 800107a:	430b      	orrs	r3, r1
 800107c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800107e:	6813      	ldr	r3, [r2, #0]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	428b      	cmp	r3, r1
 8001086:	f040 80ab 	bne.w	80011e0 <HAL_RCC_ClockConfig+0x180>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800108a:	6823      	ldr	r3, [r4, #0]
 800108c:	f013 0f02 	tst.w	r3, #2
 8001090:	d017      	beq.n	80010c2 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001092:	f013 0f04 	tst.w	r3, #4
 8001096:	d004      	beq.n	80010a2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001098:	4a55      	ldr	r2, [pc, #340]	; (80011f0 <HAL_RCC_ClockConfig+0x190>)
 800109a:	6853      	ldr	r3, [r2, #4]
 800109c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010a0:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a2:	6823      	ldr	r3, [r4, #0]
 80010a4:	f013 0f08 	tst.w	r3, #8
 80010a8:	d004      	beq.n	80010b4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010aa:	4a51      	ldr	r2, [pc, #324]	; (80011f0 <HAL_RCC_ClockConfig+0x190>)
 80010ac:	6853      	ldr	r3, [r2, #4]
 80010ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010b2:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010b4:	4a4e      	ldr	r2, [pc, #312]	; (80011f0 <HAL_RCC_ClockConfig+0x190>)
 80010b6:	6853      	ldr	r3, [r2, #4]
 80010b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010bc:	68a1      	ldr	r1, [r4, #8]
 80010be:	430b      	orrs	r3, r1
 80010c0:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	f013 0f01 	tst.w	r3, #1
 80010c8:	d052      	beq.n	8001170 <HAL_RCC_ClockConfig+0x110>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ca:	6863      	ldr	r3, [r4, #4]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d023      	beq.n	8001118 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d028      	beq.n	8001126 <HAL_RCC_ClockConfig+0xc6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d4:	4a46      	ldr	r2, [pc, #280]	; (80011f0 <HAL_RCC_ClockConfig+0x190>)
 80010d6:	6812      	ldr	r2, [r2, #0]
 80010d8:	f012 0f02 	tst.w	r2, #2
 80010dc:	f000 8082 	beq.w	80011e4 <HAL_RCC_ClockConfig+0x184>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e0:	4943      	ldr	r1, [pc, #268]	; (80011f0 <HAL_RCC_ClockConfig+0x190>)
 80010e2:	684a      	ldr	r2, [r1, #4]
 80010e4:	f022 0203 	bic.w	r2, r2, #3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80010ec:	f7ff f870 	bl	80001d0 <HAL_GetTick>
 80010f0:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f2:	6863      	ldr	r3, [r4, #4]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d01d      	beq.n	8001134 <HAL_RCC_ClockConfig+0xd4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d02a      	beq.n	8001152 <HAL_RCC_ClockConfig+0xf2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80010fc:	4b3c      	ldr	r3, [pc, #240]	; (80011f0 <HAL_RCC_ClockConfig+0x190>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f013 0f0c 	tst.w	r3, #12
 8001104:	d034      	beq.n	8001170 <HAL_RCC_ClockConfig+0x110>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001106:	f7ff f863 	bl	80001d0 <HAL_GetTick>
 800110a:	1b83      	subs	r3, r0, r6
 800110c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001110:	4293      	cmp	r3, r2
 8001112:	d9f3      	bls.n	80010fc <HAL_RCC_ClockConfig+0x9c>
          return HAL_TIMEOUT;
 8001114:	2003      	movs	r0, #3
 8001116:	e062      	b.n	80011de <HAL_RCC_ClockConfig+0x17e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001118:	4a35      	ldr	r2, [pc, #212]	; (80011f0 <HAL_RCC_ClockConfig+0x190>)
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001120:	d1de      	bne.n	80010e0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001122:	2001      	movs	r0, #1
 8001124:	e05b      	b.n	80011de <HAL_RCC_ClockConfig+0x17e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001126:	4a32      	ldr	r2, [pc, #200]	; (80011f0 <HAL_RCC_ClockConfig+0x190>)
 8001128:	6812      	ldr	r2, [r2, #0]
 800112a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800112e:	d1d7      	bne.n	80010e0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001130:	2001      	movs	r0, #1
 8001132:	e054      	b.n	80011de <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001134:	4b2e      	ldr	r3, [pc, #184]	; (80011f0 <HAL_RCC_ClockConfig+0x190>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 030c 	and.w	r3, r3, #12
 800113c:	2b04      	cmp	r3, #4
 800113e:	d017      	beq.n	8001170 <HAL_RCC_ClockConfig+0x110>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001140:	f7ff f846 	bl	80001d0 <HAL_GetTick>
 8001144:	1b83      	subs	r3, r0, r6
 8001146:	f241 3288 	movw	r2, #5000	; 0x1388
 800114a:	4293      	cmp	r3, r2
 800114c:	d9f2      	bls.n	8001134 <HAL_RCC_ClockConfig+0xd4>
          return HAL_TIMEOUT;
 800114e:	2003      	movs	r0, #3
 8001150:	e045      	b.n	80011de <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001152:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <HAL_RCC_ClockConfig+0x190>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b08      	cmp	r3, #8
 800115c:	d008      	beq.n	8001170 <HAL_RCC_ClockConfig+0x110>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800115e:	f7ff f837 	bl	80001d0 <HAL_GetTick>
 8001162:	1b80      	subs	r0, r0, r6
 8001164:	f241 3388 	movw	r3, #5000	; 0x1388
 8001168:	4298      	cmp	r0, r3
 800116a:	d9f2      	bls.n	8001152 <HAL_RCC_ClockConfig+0xf2>
          return HAL_TIMEOUT;
 800116c:	2003      	movs	r0, #3
 800116e:	e036      	b.n	80011de <HAL_RCC_ClockConfig+0x17e>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <HAL_RCC_ClockConfig+0x18c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	42ab      	cmp	r3, r5
 800117a:	d90a      	bls.n	8001192 <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <HAL_RCC_ClockConfig+0x18c>)
 800117e:	6813      	ldr	r3, [r2, #0]
 8001180:	f023 0307 	bic.w	r3, r3, #7
 8001184:	432b      	orrs	r3, r5
 8001186:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001188:	6813      	ldr	r3, [r2, #0]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	42ab      	cmp	r3, r5
 8001190:	d12a      	bne.n	80011e8 <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	f013 0f04 	tst.w	r3, #4
 8001198:	d006      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x148>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800119a:	4a15      	ldr	r2, [pc, #84]	; (80011f0 <HAL_RCC_ClockConfig+0x190>)
 800119c:	6853      	ldr	r3, [r2, #4]
 800119e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011a2:	68e1      	ldr	r1, [r4, #12]
 80011a4:	430b      	orrs	r3, r1
 80011a6:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	f013 0f08 	tst.w	r3, #8
 80011ae:	d007      	beq.n	80011c0 <HAL_RCC_ClockConfig+0x160>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011b0:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <HAL_RCC_ClockConfig+0x190>)
 80011b2:	6853      	ldr	r3, [r2, #4]
 80011b4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80011b8:	6921      	ldr	r1, [r4, #16]
 80011ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011be:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011c0:	f7ff ff18 	bl	8000ff4 <HAL_RCC_GetSysClockFreq>
 80011c4:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_RCC_ClockConfig+0x190>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80011cc:	4a09      	ldr	r2, [pc, #36]	; (80011f4 <HAL_RCC_ClockConfig+0x194>)
 80011ce:	5cd3      	ldrb	r3, [r2, r3]
 80011d0:	40d8      	lsrs	r0, r3
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <HAL_RCC_ClockConfig+0x198>)
 80011d4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f7fe ffb8 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 80011dc:	2000      	movs	r0, #0
}
 80011de:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80011e0:	2001      	movs	r0, #1
 80011e2:	e7fc      	b.n	80011de <HAL_RCC_ClockConfig+0x17e>
        return HAL_ERROR;
 80011e4:	2001      	movs	r0, #1
 80011e6:	e7fa      	b.n	80011de <HAL_RCC_ClockConfig+0x17e>
      return HAL_ERROR;
 80011e8:	2001      	movs	r0, #1
 80011ea:	e7f8      	b.n	80011de <HAL_RCC_ClockConfig+0x17e>
 80011ec:	40022000 	.word	0x40022000
 80011f0:	40021000 	.word	0x40021000
 80011f4:	08004168 	.word	0x08004168
 80011f8:	20000020 	.word	0x20000020

080011fc <HAL_RCC_GetHCLKFreq>:
}
 80011fc:	4b01      	ldr	r3, [pc, #4]	; (8001204 <HAL_RCC_GetHCLKFreq+0x8>)
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000020 	.word	0x20000020

08001208 <HAL_RCC_GetPCLK1Freq>:
{
 8001208:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800120a:	f7ff fff7 	bl	80011fc <HAL_RCC_GetHCLKFreq>
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001216:	4a03      	ldr	r2, [pc, #12]	; (8001224 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001218:	5cd3      	ldrb	r3, [r2, r3]
}    
 800121a:	40d8      	lsrs	r0, r3
 800121c:	bd08      	pop	{r3, pc}
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000
 8001224:	08004178 	.word	0x08004178

08001228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001228:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_GPIO_Init+0x40>)
 800122c:	699a      	ldr	r2, [r3, #24]
 800122e:	f042 0220 	orr.w	r2, r2, #32
 8001232:	619a      	str	r2, [r3, #24]
 8001234:	699a      	ldr	r2, [r3, #24]
 8001236:	f002 0220 	and.w	r2, r2, #32
 800123a:	9201      	str	r2, [sp, #4]
 800123c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	699a      	ldr	r2, [r3, #24]
 8001240:	f042 0204 	orr.w	r2, r2, #4
 8001244:	619a      	str	r2, [r3, #24]
 8001246:	699a      	ldr	r2, [r3, #24]
 8001248:	f002 0204 	and.w	r2, r2, #4
 800124c:	9202      	str	r2, [sp, #8]
 800124e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001250:	699a      	ldr	r2, [r3, #24]
 8001252:	f042 0208 	orr.w	r2, r2, #8
 8001256:	619a      	str	r2, [r3, #24]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	9303      	str	r3, [sp, #12]
 8001260:	9b03      	ldr	r3, [sp, #12]

}
 8001262:	b004      	add	sp, #16
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000

0800126c <MX_I2C1_Init>:
{
 800126c:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800126e:	4809      	ldr	r0, [pc, #36]	; (8001294 <MX_I2C1_Init+0x28>)
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_I2C1_Init+0x2c>)
 8001272:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_I2C1_Init+0x30>)
 8001276:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001278:	2300      	movs	r3, #0
 800127a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800127c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800127e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001282:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001284:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001286:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001288:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800128c:	f7ff fa66 	bl	800075c <HAL_I2C_Init>
}
 8001290:	bd08      	pop	{r3, pc}
 8001292:	bf00      	nop
 8001294:	2000044c 	.word	0x2000044c
 8001298:	40005400 	.word	0x40005400
 800129c:	00061a80 	.word	0x00061a80

080012a0 <SystemClock_Config>:
{
 80012a0:	b530      	push	{r4, r5, lr}
 80012a2:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a4:	2400      	movs	r4, #0
 80012a6:	9409      	str	r4, [sp, #36]	; 0x24
 80012a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80012aa:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ac:	9401      	str	r4, [sp, #4]
 80012ae:	9402      	str	r4, [sp, #8]
 80012b0:	9403      	str	r4, [sp, #12]
 80012b2:	9404      	str	r4, [sp, #16]
 80012b4:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b6:	2201      	movs	r2, #1
 80012b8:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012be:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012c0:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c2:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c4:	2502      	movs	r5, #2
 80012c6:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012ce:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d0:	a806      	add	r0, sp, #24
 80012d2:	f7ff fc9f 	bl	8000c14 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d6:	230f      	movs	r3, #15
 80012d8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012da:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012dc:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e4:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012e6:	4629      	mov	r1, r5
 80012e8:	a801      	add	r0, sp, #4
 80012ea:	f7ff feb9 	bl	8001060 <HAL_RCC_ClockConfig>
}
 80012ee:	b011      	add	sp, #68	; 0x44
 80012f0:	bd30      	pop	{r4, r5, pc}
	...

080012f4 <main>:
{
 80012f4:	b508      	push	{r3, lr}
  HAL_Init();
 80012f6:	f7fe ff4d 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 80012fa:	f7ff ffd1 	bl	80012a0 <SystemClock_Config>
  MX_GPIO_Init();
 80012fe:	f7ff ff93 	bl	8001228 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001302:	f7ff ffb3 	bl	800126c <MX_I2C1_Init>
  SSD1306_Init();  // initialise
 8001306:	f000 f98d 	bl	8001624 <SSD1306_Init>
	    SSD1306_GotoXY (0,0);
 800130a:	2100      	movs	r1, #0
 800130c:	4608      	mov	r0, r1
 800130e:	f000 f867 	bl	80013e0 <SSD1306_GotoXY>
	    SSD1306_Puts ("Wellcome to", &Font_11x18, 1);
 8001312:	4c15      	ldr	r4, [pc, #84]	; (8001368 <main+0x74>)
 8001314:	2201      	movs	r2, #1
 8001316:	4621      	mov	r1, r4
 8001318:	4814      	ldr	r0, [pc, #80]	; (800136c <main+0x78>)
 800131a:	f000 f8b5 	bl	8001488 <SSD1306_Puts>
	    SSD1306_GotoXY (10, 30);
 800131e:	211e      	movs	r1, #30
 8001320:	200a      	movs	r0, #10
 8001322:	f000 f85d 	bl	80013e0 <SSD1306_GotoXY>
	    SSD1306_Puts ("  PolyTech :)", &Font_11x18, 1);
 8001326:	2201      	movs	r2, #1
 8001328:	4621      	mov	r1, r4
 800132a:	4811      	ldr	r0, [pc, #68]	; (8001370 <main+0x7c>)
 800132c:	f000 f8ac 	bl	8001488 <SSD1306_Puts>
	    SSD1306_UpdateScreen(); //display
 8001330:	f000 f94c 	bl	80015cc <SSD1306_UpdateScreen>
	    HAL_Delay (2000);
 8001334:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001338:	f7fe ff50 	bl	80001dc <HAL_Delay>
	    SSD1306_ScrollRight(0,7);  // scroll entire screen
 800133c:	2107      	movs	r1, #7
 800133e:	2000      	movs	r0, #0
 8001340:	f000 f8e4 	bl	800150c <SSD1306_ScrollRight>
	    HAL_Delay(2000);  // 2 sec
 8001344:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001348:	f7fe ff48 	bl	80001dc <HAL_Delay>
	    SSD1306_ScrollLeft(0,7);  // scroll entire screen
 800134c:	2107      	movs	r1, #7
 800134e:	2000      	movs	r0, #0
 8001350:	f000 f908 	bl	8001564 <SSD1306_ScrollLeft>
	    HAL_Delay(2000);  // 2 sec
 8001354:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001358:	f7fe ff40 	bl	80001dc <HAL_Delay>
	    SSD1306_Stopscroll();
 800135c:	f000 f92e 	bl	80015bc <SSD1306_Stopscroll>
	    SSD1306_Clear();
 8001360:	f000 f958 	bl	8001614 <SSD1306_Clear>
  while (1)
 8001364:	e7d1      	b.n	800130a <main+0x16>
 8001366:	bf00      	nop
 8001368:	20000010 	.word	0x20000010
 800136c:	08004194 	.word	0x08004194
 8001370:	080041a0 	.word	0x080041a0

08001374 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001374:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001376:	b930      	cbnz	r0, 8001386 <SSD1306_Fill+0x12>
 8001378:	2100      	movs	r1, #0
 800137a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800137e:	4803      	ldr	r0, [pc, #12]	; (800138c <SSD1306_Fill+0x18>)
 8001380:	f000 fad4 	bl	800192c <memset>
}
 8001384:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001386:	21ff      	movs	r1, #255	; 0xff
 8001388:	e7f7      	b.n	800137a <SSD1306_Fill+0x6>
 800138a:	bf00      	nop
 800138c:	20000048 	.word	0x20000048

08001390 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8001390:	287f      	cmp	r0, #127	; 0x7f
 8001392:	d816      	bhi.n	80013c2 <SSD1306_DrawPixel+0x32>
		x >= SSD1306_WIDTH ||
 8001394:	293f      	cmp	r1, #63	; 0x3f
 8001396:	d814      	bhi.n	80013c2 <SSD1306_DrawPixel+0x32>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <SSD1306_DrawPixel+0x4c>)
 800139a:	791b      	ldrb	r3, [r3, #4]
 800139c:	b113      	cbz	r3, 80013a4 <SSD1306_DrawPixel+0x14>
		color = (SSD1306_COLOR_t)!color;
 800139e:	fab2 f282 	clz	r2, r2
 80013a2:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80013a4:	2a01      	cmp	r2, #1
 80013a6:	d00d      	beq.n	80013c4 <SSD1306_DrawPixel+0x34>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013a8:	08cb      	lsrs	r3, r1, #3
 80013aa:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80013ae:	f001 0107 	and.w	r1, r1, #7
 80013b2:	2201      	movs	r2, #1
 80013b4:	408a      	lsls	r2, r1
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <SSD1306_DrawPixel+0x4c>)
 80013b8:	4418      	add	r0, r3
 80013ba:	7a01      	ldrb	r1, [r0, #8]
 80013bc:	ea21 0102 	bic.w	r1, r1, r2
 80013c0:	7201      	strb	r1, [r0, #8]
	}
}
 80013c2:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013c4:	08cb      	lsrs	r3, r1, #3
 80013c6:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80013ca:	f001 0107 	and.w	r1, r1, #7
 80013ce:	408a      	lsls	r2, r1
 80013d0:	4b02      	ldr	r3, [pc, #8]	; (80013dc <SSD1306_DrawPixel+0x4c>)
 80013d2:	4418      	add	r0, r3
 80013d4:	7a01      	ldrb	r1, [r0, #8]
 80013d6:	4311      	orrs	r1, r2
 80013d8:	7201      	strb	r1, [r0, #8]
 80013da:	4770      	bx	lr
 80013dc:	20000040 	.word	0x20000040

080013e0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80013e0:	4b01      	ldr	r3, [pc, #4]	; (80013e8 <SSD1306_GotoXY+0x8>)
 80013e2:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 80013e4:	8059      	strh	r1, [r3, #2]
}
 80013e6:	4770      	bx	lr
 80013e8:	20000040 	.word	0x20000040

080013ec <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80013ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013f0:	4690      	mov	r8, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013f2:	4b24      	ldr	r3, [pc, #144]	; (8001484 <SSD1306_Putc+0x98>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	780a      	ldrb	r2, [r1, #0]
 80013f8:	4413      	add	r3, r2
	if (
 80013fa:	2b7f      	cmp	r3, #127	; 0x7f
 80013fc:	dc3e      	bgt.n	800147c <SSD1306_Putc+0x90>
 80013fe:	4681      	mov	r9, r0
 8001400:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <SSD1306_Putc+0x98>)
 8001404:	885b      	ldrh	r3, [r3, #2]
 8001406:	784a      	ldrb	r2, [r1, #1]
 8001408:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800140a:	2b3f      	cmp	r3, #63	; 0x3f
 800140c:	dc38      	bgt.n	8001480 <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800140e:	2600      	movs	r6, #0
 8001410:	e020      	b.n	8001454 <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <SSD1306_Putc+0x98>)
 8001414:	8818      	ldrh	r0, [r3, #0]
 8001416:	8859      	ldrh	r1, [r3, #2]
 8001418:	4431      	add	r1, r6
 800141a:	4420      	add	r0, r4
 800141c:	fab8 f288 	clz	r2, r8
 8001420:	0952      	lsrs	r2, r2, #5
 8001422:	b289      	uxth	r1, r1
 8001424:	b280      	uxth	r0, r0
 8001426:	f7ff ffb3 	bl	8001390 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800142a:	3401      	adds	r4, #1
 800142c:	782b      	ldrb	r3, [r5, #0]
 800142e:	42a3      	cmp	r3, r4
 8001430:	d90f      	bls.n	8001452 <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 8001432:	fa07 f304 	lsl.w	r3, r7, r4
 8001436:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800143a:	d0ea      	beq.n	8001412 <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <SSD1306_Putc+0x98>)
 800143e:	8818      	ldrh	r0, [r3, #0]
 8001440:	8859      	ldrh	r1, [r3, #2]
 8001442:	4431      	add	r1, r6
 8001444:	4420      	add	r0, r4
 8001446:	4642      	mov	r2, r8
 8001448:	b289      	uxth	r1, r1
 800144a:	b280      	uxth	r0, r0
 800144c:	f7ff ffa0 	bl	8001390 <SSD1306_DrawPixel>
 8001450:	e7eb      	b.n	800142a <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001452:	3601      	adds	r6, #1
 8001454:	786a      	ldrb	r2, [r5, #1]
 8001456:	42b2      	cmp	r2, r6
 8001458:	d908      	bls.n	800146c <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800145a:	6869      	ldr	r1, [r5, #4]
 800145c:	f1a9 0320 	sub.w	r3, r9, #32
 8001460:	fb02 6303 	mla	r3, r2, r3, r6
 8001464:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8001468:	2400      	movs	r4, #0
 800146a:	e7df      	b.n	800142c <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800146c:	782b      	ldrb	r3, [r5, #0]
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <SSD1306_Putc+0x98>)
 8001470:	8811      	ldrh	r1, [r2, #0]
 8001472:	440b      	add	r3, r1
 8001474:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 8001476:	4648      	mov	r0, r9
}
 8001478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 800147c:	2000      	movs	r0, #0
 800147e:	e7fb      	b.n	8001478 <SSD1306_Putc+0x8c>
 8001480:	2000      	movs	r0, #0
 8001482:	e7f9      	b.n	8001478 <SSD1306_Putc+0x8c>
 8001484:	20000040 	.word	0x20000040

08001488 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001488:	b570      	push	{r4, r5, r6, lr}
 800148a:	4604      	mov	r4, r0
 800148c:	460e      	mov	r6, r1
 800148e:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 8001490:	7820      	ldrb	r0, [r4, #0]
 8001492:	b148      	cbz	r0, 80014a8 <SSD1306_Puts+0x20>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001494:	462a      	mov	r2, r5
 8001496:	4631      	mov	r1, r6
 8001498:	f7ff ffa8 	bl	80013ec <SSD1306_Putc>
 800149c:	4603      	mov	r3, r0
 800149e:	7820      	ldrb	r0, [r4, #0]
 80014a0:	4283      	cmp	r3, r0
 80014a2:	d101      	bne.n	80014a8 <SSD1306_Puts+0x20>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 80014a4:	3401      	adds	r4, #1
 80014a6:	e7f3      	b.n	8001490 <SSD1306_Puts+0x8>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 80014a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080014ac <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80014ac:	b530      	push	{r4, r5, lr}
 80014ae:	b0c3      	sub	sp, #268	; 0x10c
uint8_t dt[256];
dt[0] = reg;
 80014b0:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 80014b4:	2100      	movs	r1, #0
 80014b6:	b28c      	uxth	r4, r1
 80014b8:	429c      	cmp	r4, r3
 80014ba:	d205      	bcs.n	80014c8 <ssd1306_I2C_WriteMulti+0x1c>
dt[i+1] = data[i];
 80014bc:	1c4c      	adds	r4, r1, #1
 80014be:	5c55      	ldrb	r5, [r2, r1]
 80014c0:	a902      	add	r1, sp, #8
 80014c2:	550d      	strb	r5, [r1, r4]
for(i = 0; i < count; i++)
 80014c4:	b2e1      	uxtb	r1, r4
 80014c6:	e7f6      	b.n	80014b6 <ssd1306_I2C_WriteMulti+0xa>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80014c8:	3301      	adds	r3, #1
 80014ca:	220a      	movs	r2, #10
 80014cc:	9200      	str	r2, [sp, #0]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	aa02      	add	r2, sp, #8
 80014d2:	4601      	mov	r1, r0
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <ssd1306_I2C_WriteMulti+0x34>)
 80014d6:	f7ff f9f7 	bl	80008c8 <HAL_I2C_Master_Transmit>
}
 80014da:	b043      	add	sp, #268	; 0x10c
 80014dc:	bd30      	pop	{r4, r5, pc}
 80014de:	bf00      	nop
 80014e0:	2000044c 	.word	0x2000044c

080014e4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80014e4:	b500      	push	{lr}
 80014e6:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 80014e8:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 80014ec:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80014f0:	230a      	movs	r3, #10
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2302      	movs	r3, #2
 80014f6:	aa03      	add	r2, sp, #12
 80014f8:	4601      	mov	r1, r0
 80014fa:	4803      	ldr	r0, [pc, #12]	; (8001508 <ssd1306_I2C_Write+0x24>)
 80014fc:	f7ff f9e4 	bl	80008c8 <HAL_I2C_Master_Transmit>
}
 8001500:	b005      	add	sp, #20
 8001502:	f85d fb04 	ldr.w	pc, [sp], #4
 8001506:	bf00      	nop
 8001508:	2000044c 	.word	0x2000044c

0800150c <SSD1306_ScrollRight>:
{
 800150c:	b538      	push	{r3, r4, r5, lr}
 800150e:	4605      	mov	r5, r0
 8001510:	460c      	mov	r4, r1
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8001512:	2226      	movs	r2, #38	; 0x26
 8001514:	2100      	movs	r1, #0
 8001516:	2078      	movs	r0, #120	; 0x78
 8001518:	f7ff ffe4 	bl	80014e4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 800151c:	2200      	movs	r2, #0
 800151e:	4611      	mov	r1, r2
 8001520:	2078      	movs	r0, #120	; 0x78
 8001522:	f7ff ffdf 	bl	80014e4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8001526:	462a      	mov	r2, r5
 8001528:	2100      	movs	r1, #0
 800152a:	2078      	movs	r0, #120	; 0x78
 800152c:	f7ff ffda 	bl	80014e4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8001530:	2200      	movs	r2, #0
 8001532:	4611      	mov	r1, r2
 8001534:	2078      	movs	r0, #120	; 0x78
 8001536:	f7ff ffd5 	bl	80014e4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 800153a:	4622      	mov	r2, r4
 800153c:	2100      	movs	r1, #0
 800153e:	2078      	movs	r0, #120	; 0x78
 8001540:	f7ff ffd0 	bl	80014e4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8001544:	2200      	movs	r2, #0
 8001546:	4611      	mov	r1, r2
 8001548:	2078      	movs	r0, #120	; 0x78
 800154a:	f7ff ffcb 	bl	80014e4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 800154e:	22ff      	movs	r2, #255	; 0xff
 8001550:	2100      	movs	r1, #0
 8001552:	2078      	movs	r0, #120	; 0x78
 8001554:	f7ff ffc6 	bl	80014e4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8001558:	222f      	movs	r2, #47	; 0x2f
 800155a:	2100      	movs	r1, #0
 800155c:	2078      	movs	r0, #120	; 0x78
 800155e:	f7ff ffc1 	bl	80014e4 <ssd1306_I2C_Write>
}
 8001562:	bd38      	pop	{r3, r4, r5, pc}

08001564 <SSD1306_ScrollLeft>:
{
 8001564:	b538      	push	{r3, r4, r5, lr}
 8001566:	4605      	mov	r5, r0
 8001568:	460c      	mov	r4, r1
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 800156a:	2227      	movs	r2, #39	; 0x27
 800156c:	2100      	movs	r1, #0
 800156e:	2078      	movs	r0, #120	; 0x78
 8001570:	f7ff ffb8 	bl	80014e4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8001574:	2200      	movs	r2, #0
 8001576:	4611      	mov	r1, r2
 8001578:	2078      	movs	r0, #120	; 0x78
 800157a:	f7ff ffb3 	bl	80014e4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800157e:	462a      	mov	r2, r5
 8001580:	2100      	movs	r1, #0
 8001582:	2078      	movs	r0, #120	; 0x78
 8001584:	f7ff ffae 	bl	80014e4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8001588:	2200      	movs	r2, #0
 800158a:	4611      	mov	r1, r2
 800158c:	2078      	movs	r0, #120	; 0x78
 800158e:	f7ff ffa9 	bl	80014e4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8001592:	4622      	mov	r2, r4
 8001594:	2100      	movs	r1, #0
 8001596:	2078      	movs	r0, #120	; 0x78
 8001598:	f7ff ffa4 	bl	80014e4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 800159c:	2200      	movs	r2, #0
 800159e:	4611      	mov	r1, r2
 80015a0:	2078      	movs	r0, #120	; 0x78
 80015a2:	f7ff ff9f 	bl	80014e4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80015a6:	22ff      	movs	r2, #255	; 0xff
 80015a8:	2100      	movs	r1, #0
 80015aa:	2078      	movs	r0, #120	; 0x78
 80015ac:	f7ff ff9a 	bl	80014e4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80015b0:	222f      	movs	r2, #47	; 0x2f
 80015b2:	2100      	movs	r1, #0
 80015b4:	2078      	movs	r0, #120	; 0x78
 80015b6:	f7ff ff95 	bl	80014e4 <ssd1306_I2C_Write>
}
 80015ba:	bd38      	pop	{r3, r4, r5, pc}

080015bc <SSD1306_Stopscroll>:
{
 80015bc:	b508      	push	{r3, lr}
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80015be:	222e      	movs	r2, #46	; 0x2e
 80015c0:	2100      	movs	r1, #0
 80015c2:	2078      	movs	r0, #120	; 0x78
 80015c4:	f7ff ff8e 	bl	80014e4 <ssd1306_I2C_Write>
}
 80015c8:	bd08      	pop	{r3, pc}
	...

080015cc <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 80015cc:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 80015ce:	2400      	movs	r4, #0
 80015d0:	e01a      	b.n	8001608 <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80015d2:	f1a4 0250 	sub.w	r2, r4, #80	; 0x50
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	2100      	movs	r1, #0
 80015da:	2078      	movs	r0, #120	; 0x78
 80015dc:	f7ff ff82 	bl	80014e4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80015e0:	2200      	movs	r2, #0
 80015e2:	4611      	mov	r1, r2
 80015e4:	2078      	movs	r0, #120	; 0x78
 80015e6:	f7ff ff7d 	bl	80014e4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80015ea:	2210      	movs	r2, #16
 80015ec:	2100      	movs	r1, #0
 80015ee:	2078      	movs	r0, #120	; 0x78
 80015f0:	f7ff ff78 	bl	80014e4 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	4a06      	ldr	r2, [pc, #24]	; (8001610 <SSD1306_UpdateScreen+0x44>)
 80015f8:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 80015fc:	2140      	movs	r1, #64	; 0x40
 80015fe:	2078      	movs	r0, #120	; 0x78
 8001600:	f7ff ff54 	bl	80014ac <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001604:	3401      	adds	r4, #1
 8001606:	b2e4      	uxtb	r4, r4
 8001608:	2c07      	cmp	r4, #7
 800160a:	d9e2      	bls.n	80015d2 <SSD1306_UpdateScreen+0x6>
}
 800160c:	bd10      	pop	{r4, pc}
 800160e:	bf00      	nop
 8001610:	20000048 	.word	0x20000048

08001614 <SSD1306_Clear>:
{
 8001614:	b508      	push	{r3, lr}
	SSD1306_Fill (0);
 8001616:	2000      	movs	r0, #0
 8001618:	f7ff feac 	bl	8001374 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800161c:	f7ff ffd6 	bl	80015cc <SSD1306_UpdateScreen>
}
 8001620:	bd08      	pop	{r3, pc}
	...

08001624 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8001624:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001626:	f644 6320 	movw	r3, #20000	; 0x4e20
 800162a:	2201      	movs	r2, #1
 800162c:	2178      	movs	r1, #120	; 0x78
 800162e:	4855      	ldr	r0, [pc, #340]	; (8001784 <SSD1306_Init+0x160>)
 8001630:	f7ff fa10 	bl	8000a54 <HAL_I2C_IsDeviceReady>
 8001634:	2800      	cmp	r0, #0
 8001636:	f040 80a3 	bne.w	8001780 <SSD1306_Init+0x15c>
	uint32_t p = 2500;
 800163a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800163e:	e000      	b.n	8001642 <SSD1306_Init+0x1e>
		p--;
 8001640:	3b01      	subs	r3, #1
	while(p>0)
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1fc      	bne.n	8001640 <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001646:	22ae      	movs	r2, #174	; 0xae
 8001648:	2100      	movs	r1, #0
 800164a:	2078      	movs	r0, #120	; 0x78
 800164c:	f7ff ff4a 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001650:	2220      	movs	r2, #32
 8001652:	2100      	movs	r1, #0
 8001654:	2078      	movs	r0, #120	; 0x78
 8001656:	f7ff ff45 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800165a:	2210      	movs	r2, #16
 800165c:	2100      	movs	r1, #0
 800165e:	2078      	movs	r0, #120	; 0x78
 8001660:	f7ff ff40 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001664:	22b0      	movs	r2, #176	; 0xb0
 8001666:	2100      	movs	r1, #0
 8001668:	2078      	movs	r0, #120	; 0x78
 800166a:	f7ff ff3b 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800166e:	22c8      	movs	r2, #200	; 0xc8
 8001670:	2100      	movs	r1, #0
 8001672:	2078      	movs	r0, #120	; 0x78
 8001674:	f7ff ff36 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001678:	2200      	movs	r2, #0
 800167a:	4611      	mov	r1, r2
 800167c:	2078      	movs	r0, #120	; 0x78
 800167e:	f7ff ff31 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001682:	2210      	movs	r2, #16
 8001684:	2100      	movs	r1, #0
 8001686:	2078      	movs	r0, #120	; 0x78
 8001688:	f7ff ff2c 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800168c:	2240      	movs	r2, #64	; 0x40
 800168e:	2100      	movs	r1, #0
 8001690:	2078      	movs	r0, #120	; 0x78
 8001692:	f7ff ff27 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001696:	2281      	movs	r2, #129	; 0x81
 8001698:	2100      	movs	r1, #0
 800169a:	2078      	movs	r0, #120	; 0x78
 800169c:	f7ff ff22 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80016a0:	22ff      	movs	r2, #255	; 0xff
 80016a2:	2100      	movs	r1, #0
 80016a4:	2078      	movs	r0, #120	; 0x78
 80016a6:	f7ff ff1d 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80016aa:	22a1      	movs	r2, #161	; 0xa1
 80016ac:	2100      	movs	r1, #0
 80016ae:	2078      	movs	r0, #120	; 0x78
 80016b0:	f7ff ff18 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80016b4:	22a6      	movs	r2, #166	; 0xa6
 80016b6:	2100      	movs	r1, #0
 80016b8:	2078      	movs	r0, #120	; 0x78
 80016ba:	f7ff ff13 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80016be:	22a8      	movs	r2, #168	; 0xa8
 80016c0:	2100      	movs	r1, #0
 80016c2:	2078      	movs	r0, #120	; 0x78
 80016c4:	f7ff ff0e 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80016c8:	223f      	movs	r2, #63	; 0x3f
 80016ca:	2100      	movs	r1, #0
 80016cc:	2078      	movs	r0, #120	; 0x78
 80016ce:	f7ff ff09 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80016d2:	22a4      	movs	r2, #164	; 0xa4
 80016d4:	2100      	movs	r1, #0
 80016d6:	2078      	movs	r0, #120	; 0x78
 80016d8:	f7ff ff04 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80016dc:	22d3      	movs	r2, #211	; 0xd3
 80016de:	2100      	movs	r1, #0
 80016e0:	2078      	movs	r0, #120	; 0x78
 80016e2:	f7ff feff 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80016e6:	2200      	movs	r2, #0
 80016e8:	4611      	mov	r1, r2
 80016ea:	2078      	movs	r0, #120	; 0x78
 80016ec:	f7ff fefa 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80016f0:	22d5      	movs	r2, #213	; 0xd5
 80016f2:	2100      	movs	r1, #0
 80016f4:	2078      	movs	r0, #120	; 0x78
 80016f6:	f7ff fef5 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80016fa:	22f0      	movs	r2, #240	; 0xf0
 80016fc:	2100      	movs	r1, #0
 80016fe:	2078      	movs	r0, #120	; 0x78
 8001700:	f7ff fef0 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001704:	22d9      	movs	r2, #217	; 0xd9
 8001706:	2100      	movs	r1, #0
 8001708:	2078      	movs	r0, #120	; 0x78
 800170a:	f7ff feeb 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800170e:	2222      	movs	r2, #34	; 0x22
 8001710:	2100      	movs	r1, #0
 8001712:	2078      	movs	r0, #120	; 0x78
 8001714:	f7ff fee6 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001718:	22da      	movs	r2, #218	; 0xda
 800171a:	2100      	movs	r1, #0
 800171c:	2078      	movs	r0, #120	; 0x78
 800171e:	f7ff fee1 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001722:	2212      	movs	r2, #18
 8001724:	2100      	movs	r1, #0
 8001726:	2078      	movs	r0, #120	; 0x78
 8001728:	f7ff fedc 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800172c:	22db      	movs	r2, #219	; 0xdb
 800172e:	2100      	movs	r1, #0
 8001730:	2078      	movs	r0, #120	; 0x78
 8001732:	f7ff fed7 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001736:	2220      	movs	r2, #32
 8001738:	2100      	movs	r1, #0
 800173a:	2078      	movs	r0, #120	; 0x78
 800173c:	f7ff fed2 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001740:	228d      	movs	r2, #141	; 0x8d
 8001742:	2100      	movs	r1, #0
 8001744:	2078      	movs	r0, #120	; 0x78
 8001746:	f7ff fecd 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800174a:	2214      	movs	r2, #20
 800174c:	2100      	movs	r1, #0
 800174e:	2078      	movs	r0, #120	; 0x78
 8001750:	f7ff fec8 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001754:	22af      	movs	r2, #175	; 0xaf
 8001756:	2100      	movs	r1, #0
 8001758:	2078      	movs	r0, #120	; 0x78
 800175a:	f7ff fec3 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800175e:	222e      	movs	r2, #46	; 0x2e
 8001760:	2100      	movs	r1, #0
 8001762:	2078      	movs	r0, #120	; 0x78
 8001764:	f7ff febe 	bl	80014e4 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001768:	2000      	movs	r0, #0
 800176a:	f7ff fe03 	bl	8001374 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 800176e:	f7ff ff2d 	bl	80015cc <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8001772:	4b05      	ldr	r3, [pc, #20]	; (8001788 <SSD1306_Init+0x164>)
 8001774:	2200      	movs	r2, #0
 8001776:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001778:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 800177a:	2001      	movs	r0, #1
 800177c:	7158      	strb	r0, [r3, #5]
}
 800177e:	bd08      	pop	{r3, pc}
		return 0;
 8001780:	2000      	movs	r0, #0
 8001782:	e7fc      	b.n	800177e <SSD1306_Init+0x15a>
 8001784:	2000044c 	.word	0x2000044c
 8001788:	20000040 	.word	0x20000040

0800178c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800178c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_MspInit+0x3c>)
 8001790:	699a      	ldr	r2, [r3, #24]
 8001792:	f042 0201 	orr.w	r2, r2, #1
 8001796:	619a      	str	r2, [r3, #24]
 8001798:	699a      	ldr	r2, [r3, #24]
 800179a:	f002 0201 	and.w	r2, r2, #1
 800179e:	9200      	str	r2, [sp, #0]
 80017a0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	69da      	ldr	r2, [r3, #28]
 80017a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017a8:	61da      	str	r2, [r3, #28]
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017b4:	4a05      	ldr	r2, [pc, #20]	; (80017cc <HAL_MspInit+0x40>)
 80017b6:	6853      	ldr	r3, [r2, #4]
 80017b8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c2:	b002      	add	sp, #8
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40010000 	.word	0x40010000

080017d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017d0:	b510      	push	{r4, lr}
 80017d2:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	2300      	movs	r3, #0
 80017d6:	9302      	str	r3, [sp, #8]
 80017d8:	9303      	str	r3, [sp, #12]
 80017da:	9304      	str	r3, [sp, #16]
 80017dc:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 80017de:	6802      	ldr	r2, [r0, #0]
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_I2C_MspInit+0x58>)
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d001      	beq.n	80017ea <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017e6:	b006      	add	sp, #24
 80017e8:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	4c10      	ldr	r4, [pc, #64]	; (800182c <HAL_I2C_MspInit+0x5c>)
 80017ec:	69a3      	ldr	r3, [r4, #24]
 80017ee:	f043 0308 	orr.w	r3, r3, #8
 80017f2:	61a3      	str	r3, [r4, #24]
 80017f4:	69a3      	ldr	r3, [r4, #24]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017fe:	23c0      	movs	r3, #192	; 0xc0
 8001800:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001802:	2312      	movs	r3, #18
 8001804:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180a:	a902      	add	r1, sp, #8
 800180c:	4808      	ldr	r0, [pc, #32]	; (8001830 <HAL_I2C_MspInit+0x60>)
 800180e:	f7fe fd55 	bl	80002bc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001812:	69e3      	ldr	r3, [r4, #28]
 8001814:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001818:	61e3      	str	r3, [r4, #28]
 800181a:	69e3      	ldr	r3, [r4, #28]
 800181c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	9b01      	ldr	r3, [sp, #4]
}
 8001824:	e7df      	b.n	80017e6 <HAL_I2C_MspInit+0x16>
 8001826:	bf00      	nop
 8001828:	40005400 	.word	0x40005400
 800182c:	40021000 	.word	0x40021000
 8001830:	40010c00 	.word	0x40010c00

08001834 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001834:	4770      	bx	lr

08001836 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <HardFault_Handler>

08001838 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <MemManage_Handler>

0800183a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183a:	e7fe      	b.n	800183a <BusFault_Handler>

0800183c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <UsageFault_Handler>

0800183e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183e:	4770      	bx	lr

08001840 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001840:	4770      	bx	lr

08001842 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001842:	4770      	bx	lr

08001844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001844:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001846:	f7fe fcb7 	bl	80001b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184a:	bd08      	pop	{r3, pc}

0800184c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <SystemInit+0x40>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	f042 0201 	orr.w	r2, r2, #1
 8001854:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001856:	6859      	ldr	r1, [r3, #4]
 8001858:	4a0d      	ldr	r2, [pc, #52]	; (8001890 <SystemInit+0x44>)
 800185a:	400a      	ands	r2, r1
 800185c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001864:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001868:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001870:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001878:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800187a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800187e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <SystemInit+0x48>)
 8001882:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001886:	609a      	str	r2, [r3, #8]
#endif 
}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000
 8001890:	f8ff0000 	.word	0xf8ff0000
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001898:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800189a:	e003      	b.n	80018a4 <LoopCopyDataInit>

0800189c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800189e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80018a0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80018a2:	3104      	adds	r1, #4

080018a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80018a4:	480a      	ldr	r0, [pc, #40]	; (80018d0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80018a8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80018aa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80018ac:	d3f6      	bcc.n	800189c <CopyDataInit>
  ldr r2, =_sbss
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80018b0:	e002      	b.n	80018b8 <LoopFillZerobss>

080018b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80018b4:	f842 3b04 	str.w	r3, [r2], #4

080018b8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80018ba:	429a      	cmp	r2, r3
  bcc FillZerobss
 80018bc:	d3f9      	bcc.n	80018b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018be:	f7ff ffc5 	bl	800184c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018c2:	f000 f80f 	bl	80018e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018c6:	f7ff fd15 	bl	80012f4 <main>
  bx lr
 80018ca:	4770      	bx	lr
  ldr r3, =_sidata
 80018cc:	080041b8 	.word	0x080041b8
  ldr r0, =_sdata
 80018d0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018d4:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 80018d8:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 80018dc:	200004a0 	.word	0x200004a0

080018e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018e0:	e7fe      	b.n	80018e0 <ADC1_2_IRQHandler>
	...

080018e4 <__libc_init_array>:
 80018e4:	b570      	push	{r4, r5, r6, lr}
 80018e6:	2600      	movs	r6, #0
 80018e8:	4d0c      	ldr	r5, [pc, #48]	; (800191c <__libc_init_array+0x38>)
 80018ea:	4c0d      	ldr	r4, [pc, #52]	; (8001920 <__libc_init_array+0x3c>)
 80018ec:	1b64      	subs	r4, r4, r5
 80018ee:	10a4      	asrs	r4, r4, #2
 80018f0:	42a6      	cmp	r6, r4
 80018f2:	d109      	bne.n	8001908 <__libc_init_array+0x24>
 80018f4:	f000 f822 	bl	800193c <_init>
 80018f8:	2600      	movs	r6, #0
 80018fa:	4d0a      	ldr	r5, [pc, #40]	; (8001924 <__libc_init_array+0x40>)
 80018fc:	4c0a      	ldr	r4, [pc, #40]	; (8001928 <__libc_init_array+0x44>)
 80018fe:	1b64      	subs	r4, r4, r5
 8001900:	10a4      	asrs	r4, r4, #2
 8001902:	42a6      	cmp	r6, r4
 8001904:	d105      	bne.n	8001912 <__libc_init_array+0x2e>
 8001906:	bd70      	pop	{r4, r5, r6, pc}
 8001908:	f855 3b04 	ldr.w	r3, [r5], #4
 800190c:	4798      	blx	r3
 800190e:	3601      	adds	r6, #1
 8001910:	e7ee      	b.n	80018f0 <__libc_init_array+0xc>
 8001912:	f855 3b04 	ldr.w	r3, [r5], #4
 8001916:	4798      	blx	r3
 8001918:	3601      	adds	r6, #1
 800191a:	e7f2      	b.n	8001902 <__libc_init_array+0x1e>
 800191c:	080041b0 	.word	0x080041b0
 8001920:	080041b0 	.word	0x080041b0
 8001924:	080041b0 	.word	0x080041b0
 8001928:	080041b4 	.word	0x080041b4

0800192c <memset>:
 800192c:	4603      	mov	r3, r0
 800192e:	4402      	add	r2, r0
 8001930:	4293      	cmp	r3, r2
 8001932:	d100      	bne.n	8001936 <memset+0xa>
 8001934:	4770      	bx	lr
 8001936:	f803 1b01 	strb.w	r1, [r3], #1
 800193a:	e7f9      	b.n	8001930 <memset+0x4>

0800193c <_init>:
 800193c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800193e:	bf00      	nop
 8001940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001942:	bc08      	pop	{r3}
 8001944:	469e      	mov	lr, r3
 8001946:	4770      	bx	lr

08001948 <_fini>:
 8001948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800194a:	bf00      	nop
 800194c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800194e:	bc08      	pop	{r3}
 8001950:	469e      	mov	lr, r3
 8001952:	4770      	bx	lr
